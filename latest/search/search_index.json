{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#what-is-tidierplotsjl","title":"What is TidierPlots.jl?","text":"<p>TidierPlots.jl is a 100% Julia implementation of the R package ggplot2 powered by Makie.jl.</p> <p><code>TidierPlots.jl</code> has three goals, which differentiate it from other plotting packages in Julia:</p> <ol> <li>Stick as closely to tidyverse syntax and behaviour as possible: Whereas other  meta-packages introduce Julia-centric idioms for working with  plots, this package\u2019s goal is to reimplement ggplot  in Julia. This currently just means that <code>TidierPlots.jl</code> gives the option for specifying <code>aes</code> with the macro <code>@es</code> to allow unquoted column references, but the use of macros may need to expand as more features are added.</li> <li>Stay as compatible as possible with Makie.jl This package is meant  to be a thin wrapper around Makie's SpecApi syntax to help introduce R users to plotting in  Julia.</li> <li>To Extend ggplot using julia-specific features where appropriate as long as this does  not confict with the first two goals. The package aims to behave exactly like ggplot  unless told otherwise. Additional options and parameters that are not present in ggplot  may be added, but options that are present in R's ggplot should behave the way they do in R.</li> </ol> <p></p> <p></p>"},{"location":"#installation","title":"Installation","text":"<p>For the \"stable\" version, access the Pkg interface by pressing <code>]</code> at the <code>julia&gt;</code> prompt, then type <code>add TidierPlots</code>.</p> <p>For the development version:</p> <pre><code>using Pkg\nPkg.add(url=\"https://github.com/TidierOrg/TidierPlots.jl\")\n</code></pre> <p>TidierPlots will also be installed automatically if you <code>add Tidier</code>.</p> <p></p> <p></p>"},{"location":"#what-functions-does-tidierplotsjl-support","title":"What functions does TidierPlots.jl support?","text":"<p>TidierPlots.jl currently supports the top-level function <code>ggplot()</code>, plus:</p> <p>Geoms:</p> <ul> <li><code>geom_point</code></li> <li><code>geom_errorbar</code></li> <li><code>geom_path</code>, <code>geom_line</code>, and <code>geom_step</code></li> <li><code>geom_bar</code>, <code>geom_col</code>, and <code>geom_histogram</code></li> <li><code>geom_boxplot</code> and <code>geom_violin</code></li> <li><code>geom_tile</code></li> <li><code>geom_density</code></li> <li><code>geom_text</code> and <code>geom_label</code></li> </ul> <p>Makie Themes:</p> <ul> <li><code>theme_ggplot2()</code> (the default)</li> <li><code>theme_dark()</code></li> <li><code>theme_black()</code></li> <li><code>theme_light()</code></li> <li><code>theme_minimal()</code></li> </ul> <p>Colour Scales:</p> <ul> <li><code>scale_color_manual()</code> - set <code>values = c(c1, c2, c3, ...)</code>, accepts anything that can be parsed as a color by Colors.jl (named colors, hex values, etc.)</li> <li><code>scale_color_[discrete|continuous|binned]()</code> - set <code>palette =</code> a ColorSchemes.jl palette as a string or symbol. Also accepts ColorSchemes.jl color scheme objects.</li> </ul> <p>Additional Elements:</p> <ul> <li><code>scale_[x|y]_[continuous|log[ |2|10]|logit|pseudolog10|sqrt|reverse]</code></li> <li><code>labs</code></li> <li><code>lims</code></li> </ul> <p></p> <p></p>"},{"location":"#display-options-for-quarto-jupyter-and-plutojl","title":"Display Options for Quarto, Jupyter, and Pluto.jl","text":"<p>Use the function <code>TidierPlots_set(option::String, value::Bool)</code> to control display options. The following options are supported:</p> <ul> <li>\"plot_show\" (default true). Enables <code>ggplot</code>-like behaviour where plots are displayed when created.</li> <li>\"plot_log\" (default true). Prints a text summary of the properties of the ggplot</li> </ul> <p>You will likely want to disable both of these if you are working in a notebook environment. In Pluto.jl, you can get interactive plots (scroll, zoom, labels, etc.) using <code>WGLMakie</code> by including <code>WGLMakie.activate!()</code> as the first cell after your imports.</p> <p></p> <p></p>"},{"location":"#differences-from-ggplot2","title":"Differences from ggplot2","text":"<p>The goal of this package is to allow you to write code that is as similar to ggplot2 code as possible. The only difference in basic usage is in the <code>aes()</code> function. TidierPlots.jl accepts two forms for aes specification, neither of which is exactly the same as ggplot2.</p> <ul> <li>Option 1: <code>aes</code> function, julia-style columns, e.g. <code>aes(x = :x, y = :y)</code> or <code>aes(:x, :y)</code></li> <li>Option 2: <code>@aes</code> (or <code>@es</code>) macro, aes as in ggplot, e.g. <code>@aes(x = x, y = y)</code> or <code>@aes(x, y)</code></li> </ul> <p>If you use Option 1, functions can be applied to columns with the <code>=&gt;</code> operator to form a <code>Pair{Symbol, Function}</code>, similar to how <code>DataFrames.jl</code> functions work.</p> <pre><code>my_fn(x) = x ./ 10\n\ngeom_point(aes(x = :x =&gt; my_fn))\n</code></pre> <p>Functions can take multiple columns as input. The following <code>geom_point</code> specification results in <code>x / y</code> (where <code>x</code> and <code>y</code> are the names of columns in a DataFrame) being plotted as the x axis of the graph:</p> <pre><code>my_new_fn(x, y) = x ./ y\n\ngeom_point(aes(x = [:x, :y] =&gt; my_new_fn))\n</code></pre> <p>With Option 2, functions will be interpreted using <code>TidierData.jl</code>:</p> <pre><code># Macro aes equivalents to the above examples\ngeom_point(@aes(x = x / 10))\ngeom_point(@aes(x = x / y))\n</code></pre> <p></p> <p></p>"},{"location":"#why-would-i-use-this-instead-of-ggplot2","title":"Why would I use this instead of ggplot2?","text":"<p>Right now, you probably wouldn't. This package is still early in development, and is not ready for production use. However, there are a couple of advantages already and the list will hopefully get longer over time.</p> <p></p> <p></p>"},{"location":"#flexible-access-to-makie-options","title":"Flexible access to Makie options","text":"<p>Access to all axis and plot options from <code>Makie</code> lets you use Makie's extensive capabilities for plot customization (example adapted from beautiful.makie.org):</p> <pre><code>using Random, DataFrames\nusing TidierPlots\nimport Makie.IntervalsBetween, Makie.Attributes\n\nRandom.seed!(123)\n\nxs = 10 .^ (range(-1, stop=1, length=100))\n\ndf = DataFrame(x = xs,\n    y = xs .^ 2 .+ abs.(2 * randn(length(xs))),\n    size = (xs .^ 2/3)[end:-1:1] .+ 6)\n\nbeautiful_makie_theme = Attributes(\n    fonts=(;regular=\"CMU Serif\"),\n)\n\nggplot(df) +\n    geom_point(aes(x = :x, y = :y, size = :size, color = :x), alpha = 0.8) +\n    scale_x_log10() +\n    scale_y_log10() +\n    labs(x = \"x\", y = \"y\") +\n    lims(y = c(.1, 100)) +\n    scale_color_continuous(palette = \"Hiroshige\", name = \"\") +\n    theme(\n        xminorticksvisible=true,\n        xminorgridvisible=true,\n        yminorticksvisible=true,\n        yminorgridvisible=true,\n        xminorticks=IntervalsBetween(9),\n        yminorticks=IntervalsBetween(9),\n        backgroundcolor = :transparent,\n        xgridstyle=:dash,\n        ygridstyle=:dash\n    ) + beautiful_makie_theme\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"#built-in-support-for-plot-layouts","title":"Built-in Support for Plot Layouts","text":"<p>Combine plots with a <code>{patchwork}</code>-inspired syntax to create complex layouts (adapted from beautiful.makie.org):</p> <pre><code>Random.seed!(123)\nn = 200\ndf = DataFrame(x = randn(n) / 2, y = randn(n))\n\ntop = ggplot(df) +\n    geom_histogram(aes(x = :x), fill = :orangered, strokewidth = 0.5) +\n    lims(x = c(-4, 4)) +\n    theme(xticklabelsvisible = false, xgridvisible = false) +\n    beautiful_makie_theme\n\nright = ggplot(df) +\n    geom_histogram(aes(x = :y), fill = :dodgerblue,\n        direction = :x, strokewidth = 0.5) +\n    lims(y = c(-3, 3)) +\n    theme(yticklabelsvisible = false, ygridvisible = false) +\n    beautiful_makie_theme\n\nmiddle = ggplot(df) + geom_point(aes(x = :x, y = :y), size = 10) +\n    lims(x = c(-4, 4), y = c(-3, 3)) + labs(x = \"x\", y = \"y\") +\n    beautiful_makie_theme\n\nblank = ggplot() +\n    theme(xticklabelsvisible = false, xgridvisible = false, yticklabelsvisible = false,\n        ygridvisible = false, xtickcolor = :transparent, ytickcolor = :transparent,\n        bottomspinevisible = false, topspinevisible = false, rightspinevisible = false,\n        leftspinevisible = false) + beautiful_makie_theme\n\ntop + blank + middle + right +\n    plot_layout(ncol = 2, nrow = 2, widths = c(3, 1), heights = c(1, 2))\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"#easy-extensions-with-makie","title":"Easy Extensions with Makie","text":"<p>Add basic support for any Makie plot using <code>geom_template(name, required_aes, makie_plot)</code>. It will inherit support for most optional aesthetics and arguments automatically:</p> <pre><code>geom_raincloud = geom_template(\"geom_raincloud\", [\"x\", \"y\"], :RainClouds)\n\nggplot(penguins) +\n    geom_raincloud(@aes(x = species, y = bill_depth_mm/10, color = species), size = 4) +\n    scale_y_continuous(labels = \"{:.1f} cm\") +\n    labs(title = \"Bill Depth by Species\", x = \"Species\", y = \"Bill Depth\") +\n    theme_minimal()\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"#mix-makie-plots-and-tidierplots","title":"Mix Makie Plots and TidierPlots","text":"<p>TidierPlots is creating Makie <code>SpecApi.GridLayout</code> objects under the hood, so you can easily combine TidierPlots output with Makie output for more flexibility:</p> <pre><code>using WGLMakie\nimport Makie.SpecApi as S\nusing TidierPlots\nusing DataFrames\n\nr = LinRange(-1, 1, 100)\ncube = [(x .^ 2 + y .^ 2 + z .^ 2) for x = r, y = r, z = r]\ncube_contour = S.Contour(cube, alpha=0.5)\nax_cube = S.Axis3(; plots=[cube_contour], protrusions = (50, 20, 10, 0))\n\nd = DataFrame(r = r, r2 = r .^ 2)\ngg = ggplot(d) + geom_line(aes(x = :r, y = :r2))\n\nplot(S.GridLayout([TidierPlots.as_GridLayout(gg) ax_cube]))\n</code></pre> <p></p> <p>See the documentation for more information and examples.</p> <p></p> <p></p>"},{"location":"#whats-new","title":"What's New","text":"<p>See NEWS.md for the latest updates.</p> <p></p> <p></p>"},{"location":"#whats-missing","title":"What's Missing","text":"<p>Lots! Please feel free to file an issue and/or submit a pull request to add additional ggplot-based features. If it is in ggplot, we want to add it.</p>"},{"location":"reference/","title":"API","text":""},{"location":"reference/#index","title":"Index","text":"<ul> <li><code>TidierPlots.aes</code></li> <li><code>TidierPlots.alpha_scale_to_ggoptions</code></li> <li><code>TidierPlots.facet_grid</code></li> <li><code>TidierPlots.geom_bar</code></li> <li><code>TidierPlots.geom_boxplot</code></li> <li><code>TidierPlots.geom_col</code></li> <li><code>TidierPlots.geom_contour</code></li> <li><code>TidierPlots.geom_contour_filled</code></li> <li><code>TidierPlots.geom_density</code></li> <li><code>TidierPlots.geom_density2d</code></li> <li><code>TidierPlots.geom_density2d_filled</code></li> <li><code>TidierPlots.geom_density_2d</code></li> <li><code>TidierPlots.geom_density_2d_filled</code></li> <li><code>TidierPlots.geom_errorbar</code></li> <li><code>TidierPlots.geom_errorbarh</code></li> <li><code>TidierPlots.geom_histogram</code></li> <li><code>TidierPlots.geom_hline</code></li> <li><code>TidierPlots.geom_label</code></li> <li><code>TidierPlots.geom_line</code></li> <li><code>TidierPlots.geom_path</code></li> <li><code>TidierPlots.geom_point</code></li> <li><code>TidierPlots.geom_rainclouds</code></li> <li><code>TidierPlots.geom_smooth</code></li> <li><code>TidierPlots.geom_step</code></li> <li><code>TidierPlots.geom_text</code></li> <li><code>TidierPlots.geom_tile</code></li> <li><code>TidierPlots.geom_violin</code></li> <li><code>TidierPlots.geom_vline</code></li> <li><code>TidierPlots.guides</code></li> <li><code>TidierPlots.handle_point_color_and_fill</code></li> <li><code>TidierPlots.label_bytes</code></li> <li><code>TidierPlots.label_currency</code></li> <li><code>TidierPlots.label_date</code></li> <li><code>TidierPlots.label_log</code></li> <li><code>TidierPlots.label_number</code></li> <li><code>TidierPlots.label_ordinal</code></li> <li><code>TidierPlots.label_percent</code></li> <li><code>TidierPlots.label_pvalue</code></li> <li><code>TidierPlots.label_scientific</code></li> <li><code>TidierPlots.label_wrap</code></li> <li><code>TidierPlots.linewidth_scale_to_ggoptions</code></li> <li><code>TidierPlots.make_alpha_lookup_continuous</code></li> <li><code>TidierPlots.make_linewidth_lookup_continuous</code></li> <li><code>TidierPlots.position_facets</code></li> <li><code>TidierPlots.scale_custom</code></li> <li><code>TidierPlots.shape_scale_to_ggoptions</code></li> <li><code>TidierPlots.size_scale_to_ggoptions</code></li> </ul>"},{"location":"reference/#reference-exported-functions","title":"Reference - Exported functions","text":"<p># <code>TidierPlots.aes</code> \u2014 Method.</p> <pre><code>aes(args...; kwargs...)\n</code></pre> <p>Details</p> <p>TBD</p> <p>source</p> <p># <code>TidierPlots.facet_grid</code> \u2014 Method.</p> <pre><code>facet_grid(;rows, cols, scales = \"fixed\", switch = \"none\")\n</code></pre> <p>facetgrid() forms a matrix of panels defined by row and column faceting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data. If you have only one variable with many levels, try facetwrap().</p> <p>Arguments</p> <ul> <li><code>rows</code> (required): Variable to use for the rows of the matrix</li> <li><code>cols</code> (required): Variable to use for the columns of the matrix</li> <li><code>scales</code> (optional): Should the scales be fixed or free? Options: \"free\", \"freex\", \"freey\"</li> <li><code>switch</code> (optional): Flip the labels from their default \"top and right\". Options: \"x\", \"y\", \"both\".</li> </ul> <p>source</p> <p># <code>TidierPlots.geom_bar</code> \u2014 Function.</p> <pre><code>geom_bar(aes(...), ...)\ngeom_bar(plot::GGPlot, aes(...), ...)\n</code></pre> <p>Represent the counts of a grouping variable as columns.</p> <p>Details</p> <p>The columns are stacked by default, and the behavior can be changed with the \"position\" argument. The position can either be \"stack\" or \"dodge\". If the argument is \"dodge\", then a a grouping variable will also need to be supplied to <code>aes</code>. Alternatively you can supply the grouping variable to <code>dodge</code> within the aesthetic.</p> <p>Arguments</p> <ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.BarPlot)</li> </ul> <p>Required Aesthetics</p> <ul> <li><code>x</code> OR <code>y</code> (not both)</li> </ul> <p>Optional Aesthetics (see <code>aes</code>)</p> <ul> <li><code>color</code> / <code>colour</code></li> <li><code>strokecolor</code> / <code>strokecolour</code></li> <li><code>dodge</code></li> <li><code>group</code></li> </ul> <p>Optional Arguments</p> <ul> <li><code>position</code>: \"stack\" (default) or \"dodge\"</li> <li><code>stroke</code> / <code>strokewidth</code></li> <li><code>strokecolor</code> / <code>strokecolour</code></li> <li><code>direction</code>: <code>:y</code> (default) or :x</li> <li><code>dodge_gap</code></li> <li><code>gap</code></li> </ul> <p>Examples</p> <pre><code># vertical bar plot\nggplot(penguins) + geom_bar(@aes(x = species))\n\n# horizontal bar plot\nggplot(penguins) + geom_bar(@aes(y = species))\n\n# stacked\nggplot(penguins, @aes(x = species, fill=sex)) + geom_bar()\n\n# dodged\nggplot(penguins, @aes(x = species, fill=sex, dodge = sex)) + geom_bar()\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_boxplot</code> \u2014 Function.</p> <pre><code>geom_boxplot(aes(...), ...)\ngeom_boxplot(plot::GGPlot, aes(...), ...)\n</code></pre> <p>Compactly displays the distribution of continuous data.</p> <p>Arguments</p> <ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.BoxPlot)</li> </ul> <p>Required Aesthetics</p> <ul> <li><code>x</code> (integer or categorical)</li> <li><code>y</code> (numeric)</li> </ul> <p>Optional Aesthetics (see <code>aes</code>)</p> <ul> <li><code>color</code> / <code>colour</code> (used in conjunction with <code>dodge</code>)</li> <li><code>dodge</code></li> </ul> <p>Optional Arguments</p> <ul> <li><code>orientation=:vertical</code>: orientation of box (<code>:vertical</code> or <code>:horizontal</code>)</li> <li><code>width=1</code></li> <li><code>gap=0.2</code></li> <li><code>show_notch=false</code></li> <li><code>nothchwidth=0.5</code></li> <li><code>show_median=true</code></li> <li><code>dodge_gap=0.03</code></li> </ul> <p>Examples</p> <pre><code>ggplot(penguins, @aes(x=species, y=bill_length_mm)) +\n    geom_boxplot()\n\nggplot(penguins, @aes(y=species, x=bill_length_mm)) +\n    geom_boxplot()\n\nggplot(penguins, @aes(x=species, y=bill_length_mm, fill=sex)) +\n    geom_boxplot()\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_col</code> \u2014 Function.</p> <pre><code>geom_col(aes(...), ...)\ngeom_col(plot::GGPlot, aes(...), ...)\n</code></pre> <p>Represent data as columns.</p> <p>Details</p> <p>The columns are stacked by default, and the behavior can be changed with the \"position\" argument. The position can either be \"stack\" or \"dodge\". If the argument is \"dodge\", then a a grouping variable will also need to be supplied to <code>aes</code>. Alternatively you can supply the grouping variable to <code>dodge</code> within the aesthetic.</p> <p>Arguments</p> <ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.BarPlot)</li> </ul> <p>Required Aesthetics</p> <ul> <li><code>x</code></li> <li><code>y</code></li> </ul> <p>Optional Aesthetics (see <code>aes</code>)</p> <ul> <li><code>color</code> / <code>colour</code></li> <li><code>strokecolor</code> / <code>strokecolour</code></li> <li><code>dodge</code></li> <li><code>group</code></li> </ul> <p>Optional Arguments</p> <ul> <li><code>position</code>: \"stack\" (default) or \"dodge\"</li> <li><code>stroke</code> / <code>strokewidth</code></li> <li><code>strokecolor</code> / <code>strokecolour</code></li> <li><code>direction</code>: <code>:y</code> (default) or :x</li> <li><code>dodge_gap</code></li> <li><code>gap</code></li> </ul> <p>Examples</p> <pre><code>df = @chain penguins begin\n    @group_by(species, sex)\n    @summarize(mean_bill_length_mm = mean(bill_length_mm))\n    @ungroup()\nend\n\nggplot(df) +\n    geom_col(@aes(x = species, y = mean_bill_length_mm))\n\n# dodge using the group and position arguments\nggplot(df) +\n    geom_col(@aes(x = species, y = mean_bill_length_mm, group = sex),\n             position=\"dodge\")\n\n# dodge using the dodge aesthetic\nggplot(df) +\n    geom_col(@aes(x = species, y = mean_bill_length_mm, dodge = sex))\n\n# color based on grouping variable\nggplot(df) +\n    geom_col(@aes(x = species, y = mean_bill_length_mm, color = sex))\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_contour</code> \u2014 Function.</p> <pre><code>geom_density_2d(aes(...), ...)\ngeom_density_2d(plot::GGPlot, aes(...), ...)\n\ngeom_density2d(aes(...), ...)\ngeom_density2d(plot::GGPlot, aes(...), ...)\n\ngeom_contour(aes(...), ...)\ngeom_contour(plot::GGPlot, aes(...), ...)\n</code></pre> <p>Represent data as a 2D density contour using 2D kernel density estimation.</p> <p>Arguments</p> <ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.Density)</li> </ul> <p>Required Aesthetics</p> <ul> <li><code>x</code></li> <li><code>y</code></li> </ul> <p>Optional Aesthetics (see <code>aes</code>)</p> <ul> <li><code>color</code> / <code>colour</code></li> <li><code>strokewidth</code> / <code>stroke</code></li> <li><code>linestyle</code> / <code>linetype</code></li> <li><code>alpha</code></li> <li><code>group</code></li> </ul> <p>Optional Arguments</p> <ul> <li><code>breaks</code> / <code>levels</code></li> </ul> <p>Examples</p> <pre><code>ggplot(penguins, @aes(x=bill_length_mm, y=bill_depth_mm)) +\n    geom_density_2d()\n\nggplot(penguins, @aes(x=bill_length_mm, y=bill_depth_mm)) +\n    geom_density_2d(color = :black, stroke = 2)\n</code></pre> <p>See also <code>geom_contour_filled</code> and <code>geom_density_2d_filled</code> for similar geoms.</p> <p>source</p> <p># <code>TidierPlots.geom_contour_filled</code> \u2014 Function.</p> <pre><code>geom_density_2d_filled(aes(...), ...)\ngeom_density_2d_filled(plot::GGPlot, aes(...), ...)\n\ngeom_density2d_filled(aes(...), ...)\ngeom_density2d_filled(plot::GGPlot, aes(...), ...)\n\ngeom_contour_filled(aes(...), ...)\ngeom_contour_filled(plot::GGPlot, aes(...), ...)\n</code></pre> <p>Represent data as a filled 2D density contour using 2D kernel density estimation.</p> <p>Arguments</p> <ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.Density)</li> </ul> <p>Required Aesthetics</p> <ul> <li><code>x</code></li> <li><code>y</code></li> </ul> <p>Optional Aesthetics (see <code>aes</code>)</p> <ul> <li><code>color</code> / <code>colour</code></li> <li><code>alpha</code></li> <li><code>group</code></li> </ul> <p>Optional Arguments</p> <ul> <li><code>breaks</code> / <code>levels</code></li> </ul> <p>Examples</p> <pre><code>ggplot(penguins, @aes(x=bill_length_mm, y=bill_depth_mm)) +\n    geom_density_2d_filled()\n\nggplot(penguins, @aes(x=bill_length_mm, y=bill_depth_mm)) +\n    geom_density_2d_filled(color = :black, stroke = 2)\n</code></pre> <p>See also <code>geom_contour</code> and <code>geom_density_2d</code> for similar geoms.</p> <p>source</p> <p># <code>TidierPlots.geom_density</code> \u2014 Function.</p> <pre><code>geom_density(aes(...), ...)\ngeom_density(plot::GGPlot, aes(...), ...)\n</code></pre> <p>Represent data as a smooth density curve.</p> <p>Arguments</p> <ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.Density)</li> </ul> <p>Required Aesthetics</p> <ul> <li><code>x</code></li> </ul> <p>Optional Aesthetics (see <code>aes</code>)</p> <ul> <li>NA</li> </ul> <p>Optional Arguments</p> <ul> <li><code>color</code> / <code>colour</code></li> <li><code>colormap</code> / <code>palette</code></li> <li><code>strokecolor</code> / <code>strokecolour</code></li> <li><code>strokewidth</code> / <code>stroke</code></li> <li><code>linestyle</code> / <code>linetype</code></li> <li><code>direction=:x</code></li> <li><code>npoints=200</code></li> </ul> <p>Examples</p> <pre><code>ggplot(penguins, @aes(x=bill_length_mm)) + geom_density()\n\nggplot(penguins, @aes(x=bill_length_mm)) +\n    geom_density(color = :black, stroke = 2)\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_density2d</code> \u2014 Function.</p> <pre><code>geom_density_2d(aes(...), ...)\ngeom_density_2d(plot::GGPlot, aes(...), ...)\n\ngeom_density2d(aes(...), ...)\ngeom_density2d(plot::GGPlot, aes(...), ...)\n\ngeom_contour(aes(...), ...)\ngeom_contour(plot::GGPlot, aes(...), ...)\n</code></pre> <p>Represent data as a 2D density contour using 2D kernel density estimation.</p> <p>Arguments</p> <ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.Density)</li> </ul> <p>Required Aesthetics</p> <ul> <li><code>x</code></li> <li><code>y</code></li> </ul> <p>Optional Aesthetics (see <code>aes</code>)</p> <ul> <li><code>color</code> / <code>colour</code></li> <li><code>strokewidth</code> / <code>stroke</code></li> <li><code>linestyle</code> / <code>linetype</code></li> <li><code>alpha</code></li> <li><code>group</code></li> </ul> <p>Optional Arguments</p> <ul> <li><code>breaks</code> / <code>levels</code></li> </ul> <p>Examples</p> <pre><code>ggplot(penguins, @aes(x=bill_length_mm, y=bill_depth_mm)) +\n    geom_density_2d()\n\nggplot(penguins, @aes(x=bill_length_mm, y=bill_depth_mm)) +\n    geom_density_2d(color = :black, stroke = 2)\n</code></pre> <p>See also <code>geom_contour_filled</code> and <code>geom_density_2d_filled</code> for similar geoms.</p> <p>source</p> <p># <code>TidierPlots.geom_density2d_filled</code> \u2014 Function.</p> <pre><code>geom_density_2d_filled(aes(...), ...)\ngeom_density_2d_filled(plot::GGPlot, aes(...), ...)\n\ngeom_density2d_filled(aes(...), ...)\ngeom_density2d_filled(plot::GGPlot, aes(...), ...)\n\ngeom_contour_filled(aes(...), ...)\ngeom_contour_filled(plot::GGPlot, aes(...), ...)\n</code></pre> <p>Represent data as a filled 2D density contour using 2D kernel density estimation.</p> <p>Arguments</p> <ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.Density)</li> </ul> <p>Required Aesthetics</p> <ul> <li><code>x</code></li> <li><code>y</code></li> </ul> <p>Optional Aesthetics (see <code>aes</code>)</p> <ul> <li><code>color</code> / <code>colour</code></li> <li><code>alpha</code></li> <li><code>group</code></li> </ul> <p>Optional Arguments</p> <ul> <li><code>breaks</code> / <code>levels</code></li> </ul> <p>Examples</p> <pre><code>ggplot(penguins, @aes(x=bill_length_mm, y=bill_depth_mm)) +\n    geom_density_2d_filled()\n\nggplot(penguins, @aes(x=bill_length_mm, y=bill_depth_mm)) +\n    geom_density_2d_filled(color = :black, stroke = 2)\n</code></pre> <p>See also <code>geom_contour</code> and <code>geom_density_2d</code> for similar geoms.</p> <p>source</p> <p># <code>TidierPlots.geom_density_2d</code> \u2014 Function.</p> <pre><code>geom_density_2d(aes(...), ...)\ngeom_density_2d(plot::GGPlot, aes(...), ...)\n\ngeom_density2d(aes(...), ...)\ngeom_density2d(plot::GGPlot, aes(...), ...)\n\ngeom_contour(aes(...), ...)\ngeom_contour(plot::GGPlot, aes(...), ...)\n</code></pre> <p>Represent data as a 2D density contour using 2D kernel density estimation.</p> <p>Arguments</p> <ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.Density)</li> </ul> <p>Required Aesthetics</p> <ul> <li><code>x</code></li> <li><code>y</code></li> </ul> <p>Optional Aesthetics (see <code>aes</code>)</p> <ul> <li><code>color</code> / <code>colour</code></li> <li><code>strokewidth</code> / <code>stroke</code></li> <li><code>linestyle</code> / <code>linetype</code></li> <li><code>alpha</code></li> <li><code>group</code></li> </ul> <p>Optional Arguments</p> <ul> <li><code>breaks</code> / <code>levels</code></li> </ul> <p>Examples</p> <pre><code>ggplot(penguins, @aes(x=bill_length_mm, y=bill_depth_mm)) +\n    geom_density_2d()\n\nggplot(penguins, @aes(x=bill_length_mm, y=bill_depth_mm)) +\n    geom_density_2d(color = :black, stroke = 2)\n</code></pre> <p>See also <code>geom_contour_filled</code> and <code>geom_density_2d_filled</code> for similar geoms.</p> <p>source</p> <p># <code>TidierPlots.geom_density_2d_filled</code> \u2014 Function.</p> <pre><code>geom_density_2d_filled(aes(...), ...)\ngeom_density_2d_filled(plot::GGPlot, aes(...), ...)\n\ngeom_density2d_filled(aes(...), ...)\ngeom_density2d_filled(plot::GGPlot, aes(...), ...)\n\ngeom_contour_filled(aes(...), ...)\ngeom_contour_filled(plot::GGPlot, aes(...), ...)\n</code></pre> <p>Represent data as a filled 2D density contour using 2D kernel density estimation.</p> <p>Arguments</p> <ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.Density)</li> </ul> <p>Required Aesthetics</p> <ul> <li><code>x</code></li> <li><code>y</code></li> </ul> <p>Optional Aesthetics (see <code>aes</code>)</p> <ul> <li><code>color</code> / <code>colour</code></li> <li><code>alpha</code></li> <li><code>group</code></li> </ul> <p>Optional Arguments</p> <ul> <li><code>breaks</code> / <code>levels</code></li> </ul> <p>Examples</p> <pre><code>ggplot(penguins, @aes(x=bill_length_mm, y=bill_depth_mm)) +\n    geom_density_2d_filled()\n\nggplot(penguins, @aes(x=bill_length_mm, y=bill_depth_mm)) +\n    geom_density_2d_filled(color = :black, stroke = 2)\n</code></pre> <p>See also <code>geom_contour</code> and <code>geom_density_2d</code> for similar geoms.</p> <p>source</p> <p># <code>TidierPlots.geom_errorbar</code> \u2014 Method.</p> <pre><code>geom_errorbar(aes(...), ...)\ngeom_errorbar(plot::GGPlot, aes(...), ...)\n</code></pre> <p>Represents data as a vertical interval.</p> <p>Arguments</p> <ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.Rangebars)</li> </ul> <p>Required Aesthetics</p> <ul> <li><code>x</code></li> <li><code>ymin</code></li> <li><code>ymax</code></li> </ul> <p>Optional Aesthetics (see <code>aes</code>)</p> <ul> <li>NA</li> </ul> <p>Optional Arguments</p> <ul> <li><code>color</code> / <code>colour</code></li> <li><code>direction=:y</code></li> <li><code>linewidth</code></li> <li><code>whiskerwidth</code> / <code>width</code></li> </ul> <p>Examples</p> <pre><code>df = DataFrame(\n    trt   = [1, 1, 2, 2],\n    resp  = [1, 5, 3, 4],\n    group = [1, 2, 1, 2],\n    lower = [0.8, 4.6, 2.4, 3.6],\n    upper = [1.1, 5.3, 3.3, 4.2],\n)\n\nggplot(df, @aes(x = trt, ymin = lower, ymax = upper)) +\n    geom_errorbar(width=20, linewidth=2)\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_errorbarh</code> \u2014 Method.</p> <pre><code>geom_errorbarh(aes(...), ...)\ngeom_errorbarh(plot::GGPlot, aes(...), ...)\n</code></pre> <p>Represents data as a horizontal interval.</p> <p>Arguments</p> <ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.Rangebars)</li> </ul> <p>Required Aesthetics</p> <ul> <li><code>y</code></li> <li><code>xmin</code></li> <li><code>xmax</code></li> </ul> <p>Optional Aesthetics (see <code>aes</code>)</p> <ul> <li>NA</li> </ul> <p>Optional Arguments</p> <ul> <li><code>color</code> / <code>colour</code></li> <li><code>direction=:x</code></li> <li><code>linewidth</code></li> <li><code>whiskerwidth</code> / <code>width</code></li> </ul> <p>Examples</p> <pre><code>df = DataFrame(\n    trt   = [1, 1, 2, 2],\n    resp  = [1, 5, 3, 4],\n    group = [1, 2, 1, 2],\n    lower = [0.8, 4.6, 2.4, 3.6],\n    upper = [1.1, 5.3, 3.3, 4.2],\n)\n\nggplot(df, @aes(y = trt, xmin = lower, xmax = upper)) +\n    geom_errorbarh(linewidth=2)\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_histogram</code> \u2014 Function.</p> <pre><code>geom_histogram(aes(...), ...)\ngeom_histogram(plot::GGPlot, aes(...), ...)\n</code></pre> <p>Represents data as a histogram.</p> <p>Arguments</p> <ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.Hist)</li> </ul> <p>Required Aesthetics</p> <ul> <li><code>x</code></li> </ul> <p>Optional Aesthetics (see <code>aes</code>)</p> <ul> <li>NA</li> </ul> <p>Optional Arguments</p> <ul> <li><code>bins</code></li> <li><code>normalization</code></li> <li><code>color</code> / <code>colour</code></li> <li><code>stroke</code> / <code>strokewidth</code></li> <li><code>strokecolor</code> / <code>strokecolour</code></li> </ul> <p>Examples</p> <pre><code>ggplot(penguins, @aes(x = bill_length_mm)) +\n    geom_histogram()\n\nggplot(penguins, @aes(x = bill_length_mm)) +\n    geom_histogram(normalization=:probability, bins=20)\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_hline</code> \u2014 Method.</p> <pre><code>geom_hline(aes(...), ...)\ngeom_hline(plot::GGPlot, aes(...), ...)\n</code></pre> <p>Plot a horizontal line at the given y-intercept(s).</p> <p>Arguments</p> <ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.HLines)</li> </ul> <p>Required Aesthetics</p> <ul> <li>NA</li> </ul> <p>Optional Aesthetics (see <code>aes</code>)</p> <ul> <li><code>yintercept(s)</code></li> <li><code>color</code> / <code>colour</code></li> </ul> <p>Optional Arguments</p> <ul> <li><code>yintercept(s)</code></li> <li><code>color</code> / <code>colour</code></li> <li><code>linewidth</code></li> <li><code>linestyle</code> / <code>linetype</code></li> <li><code>colormap</code> / <code>palette</code></li> <li><code>alpha</code></li> </ul> <p>Examples</p> <pre><code># Plot only a single y-intercept\nggplot() + geom_hline(yintercept = 3)\n\n# Plot multiple y-intercepts\nggplot() + geom_hline(yintercept = [-1, 4])\n\n# Plot multiple y-intercepts mapped to a column\ndf = DataFrame(y = rand(4))\nggplot(df, @aes(yintercept = y)) + geom_hline()\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_label</code> \u2014 Function.</p> <pre><code>geom_label(aes(...), ...)\ngeom_label(plot::GGPlot, aes(...), ...)\n</code></pre> <p>Plot text on a graph.</p> <p>ggplot2 deviation</p> <p>Currently this method is the same as <code>geom_text</code>, and does not put the text in a rectangle like in <code>ggplot2</code>.</p> <p>Arguments</p> <ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.Text)</li> </ul> <p>Required Aesthetics</p> <ul> <li><code>x</code></li> <li><code>y</code></li> <li><code>text</code></li> </ul> <p>Optional Aesthetics (see <code>aes</code>)</p> <ul> <li><code>color</code> / <code>colour</code></li> </ul> <p>Optional Arguments</p> <ul> <li><code>color</code> / <code>colour</code></li> <li><code>colormap</code> / <code>palette</code></li> <li><code>align</code>: tuple of positions (e.g. <code>(:left, :bottom)</code>)</li> <li><code>font</code></li> <li><code>justification</code></li> <li><code>rotation</code></li> <li><code>fontsize</code></li> <li><code>strokewidth</code></li> <li><code>strokecolor</code></li> <li><code>glowwidth</code> / <code>glow</code></li> <li><code>glowcolor</code> / <code>glowcolour</code></li> <li><code>word_wrap_width</code></li> <li><code>alpha</code></li> </ul> <p>Examples</p> <pre><code>df = DataFrame(\n    x = [1,1,2,2],\n    y = [1,2,1,2],\n    t = [\"A\", \"B\", \"C\", \"D\"]\n)\n\nggplot(df, @aes(x=x, y=y, text=t, color=t)) + geom_label()\n\nggplot(df, @aes(x=x, y=y, color=t)) +\n    geom_label(@aes(text=t), fontsize=24, align=(:left, :bottom), font=:bold) +\n    geom_point() +\n    lims(x = (0, 3), y = (0, 3))\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_line</code> \u2014 Function.</p> <pre><code>geom_line(aes(...), ...)\ngeom_line(plot::GGPlot, aes(...), ...)\n</code></pre> <p>Represents data as connected points in the order of the variable on the x-axis.</p> <p>Arguments</p> <ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.Lines)</li> </ul> <p>Required Aesthetics</p> <ul> <li><code>x</code></li> <li><code>y</code></li> </ul> <p>Optional Aesthetics (see <code>aes</code>)</p> <ul> <li><code>color</code> / <code>colour</code></li> </ul> <p>Optional Arguments</p> <ul> <li><code>color</code> / <code>colour</code></li> <li><code>colormap</code> / <code>palette</code></li> <li><code>linestyle</code> / <code>linetype</code></li> <li><code>linewidth</code></li> <li><code>alpha</code></li> </ul> <p>Examples</p> <pre><code>xs = range(0, 2pi, length=30)\ndf = DataFrame(x = xs, y = sin.(xs))\n\nggplot(df, @aes(x = x, y = y)) + geom_line()\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_path</code> \u2014 Function.</p> <pre><code>geom_path(aes(...), ...)\ngeom_path(plot::GGPlot, aes(...), ...)\n</code></pre> <p>Represents data as connected points in the order in which they appear in the data.</p> <p>Arguments</p> <ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.Lines)</li> </ul> <p>Required Aesthetics</p> <ul> <li><code>x</code></li> <li><code>y</code></li> </ul> <p>Optional Aesthetics (see <code>aes</code>)</p> <ul> <li><code>color</code> / <code>colour</code></li> </ul> <p>Optional Arguments</p> <ul> <li><code>color</code> / <code>colour</code></li> <li><code>colormap</code> / <code>palette</code></li> <li><code>linestyle</code> / <code>linetype</code></li> <li><code>linewidth</code></li> <li><code>alpha</code></li> </ul> <p>Examples</p> <pre><code>ggplot(penguins, @aes(x = bill_length_mm, y = bill_depth_mm)) +\n    geom_path()\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_point</code> \u2014 Function.</p> <pre><code>geom_point(aes(...), ...)\ngeom_point(plot::GGPlot, aes(...), ...)\n</code></pre> <p>The point geom is used to create scatterplots. The scatterplot is most useful for displaying the relationship between two continuous variables. It can be used to compare one continuous and one categorical variable, or two categorical variables, but other charts are usually more appropriate. A bubblechart is a scatterplot with a third variable mapped to the size of points.</p> <p>Arguments</p> <ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to. This is typically used to facilitate creating your ggplot as part of a @chain.</li> <li><code>data</code> (DataFrame): Data to use for this geom. If not provided, the geom will inherit the data from ggplot.</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>inherit_aes</code>: should the geom inherit aes from the ggplot?</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.Scatter)</li> </ul> <p>Overplotting</p> <p>The biggest potential problem with a scatterplot is overplotting: whenever you have more than a few points, points may be plotted on top of one another. This can severely distort the visual appearance of the plot. There is no one solution to this problem, but there are some techniques that can help. You can add additional information with geomsmooth(), or if you have few unique x values, geomboxplot() may also be useful. Another technique is to make the points transparent (e.g. geompoint(alpha = 0.05)) or very small (e.g. geompoint(shape = '.')).</p> <p>Required Aesthetics</p> <ul> <li><code>x</code></li> <li><code>y</code></li> </ul> <p>Optional Aesthetics (see <code>aes</code>)</p> <ul> <li><code>color</code> / <code>colour</code></li> <li><code>fill</code></li> <li><code>shape</code></li> <li><code>size</code></li> <li><code>stroke</code></li> </ul> <p>Optional Arguments</p> <ul> <li><code>color</code> / <code>colour</code></li> <li><code>colormap</code> / <code>palette</code></li> <li><code>marker</code> / <code>shape</code></li> <li><code>markersize</code> / <code>size</code></li> <li><code>strokewidth</code> / <code>stroke</code></li> <li><code>strokecolor</code> / <code>strokecolour</code></li> <li><code>glowwidth</code> / <code>glow</code></li> <li><code>glowcolor</code> / <code>glowcolour</code></li> <li><code>alpha</code></li> </ul> <p>Examples</p> <pre><code>p = ggplot(penguins, @aes(bill_length_mm, bill_depth_mm))\np + geom_point()\n\n# add aesthetic mappings\np + geom_point(aes(colour = :sex))\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_rainclouds</code> \u2014 Function.</p> <pre><code>geom_rainclouds(aes(...), ...)\ngeom_rainclouds(plot::GGPlot, aes(...), ...)\n</code></pre> <p>\"Raincloud\" plots are a combination of a (half) violin plot, box plot and scatter plots. The three together can make an appealing and informative visual, particularly for large N datasets.</p> <p>Arguments</p> <ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to. This is typically used to facilitate creating your ggplot as part of a @chain.</li> <li><code>data</code> (DataFrame): Data to use for this geom. If not provided, the geom will inherit the data from ggplot.</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>inherit_aes</code>: should the geom inherit aes from the ggplot?</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.RainClouds)</li> </ul> <p>Required Aesthetics</p> <ul> <li><code>x</code></li> <li><code>y</code></li> </ul> <p>Optional Aesthetics (see <code>aes</code>)</p> <ul> <li><code>color</code> / <code>colour</code></li> <li><code>size</code></li> <li><code>stroke</code></li> <li><code>dodge</code></li> </ul> <p>Optional Arguments</p> <ul> <li><code>boxplot_nudge</code>: Default 0.075. Determines the distance away the boxplot should be placed from the center line when center_boxplot is false. This is the value used to recentering the boxplot.</li> <li><code>boxplot_width</code>: Default 0.1. Determines the width of the boxplot.</li> <li><code>center_boxplot</code>: Default true. Determines whether the boxplot should be centered on the category.</li> <li><code>cloud_width</code>: Default 0.75. Determines the width of the violin.</li> <li><code>clouds</code>: Default violin. Valid values: [violin, hist, nothing]clouds</li> <li><code>color</code> / <code>colour</code>: Default will be blue unless changed by palette or aes.</li> <li><code>dodge_gap</code>: Default 0.01. Determines the gap between the dodged boxes.</li> <li><code>gap</code>: Default 0.2. Distance between the main elements of the plot.</li> <li><code>hist_bins</code>: Default 30. If <code>clouds == hist</code>, determines the number of bins for the histogram.</li> <li><code>markersize</code> / <code>size</code>: Default 2. Size of markers in the scatterplot.</li> <li><code>plot_boxplots</code>: Default true. Determines whether the boxplot should be plotted.</li> <li><code>show_boxplot_outliers</code>: Default false. Determines whether the outliers should be shown in the boxplot.</li> <li><code>show_median</code>: Default true. Determines whether the median should be shown in the boxplot.</li> <li><code>side</code>: Default :left. Determines the side of the violin relative to the points.</li> <li><code>strokewidth</code> / <code>stroke</code>: Default 1. Width of the stroke around the boxplot.</li> <li><code>whisker_width</code>: Default 0.5. Width of the whiskers in the boxplot.</li> </ul> <p>Examples</p> <pre><code>ggplot(penguins) +\n    geom_rainclouds(@aes(x = species, y = bill_depth_mm/10, color = species), size = 5) +\n    scale_y_continuous(labels = \"{:.1f} cm\") +\n    labs(title = \"Bill Depth by Species\", x = \"Species\", y = \"Bill Depth\") +\n    theme_minimal()\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_smooth</code> \u2014 Method.</p> <pre><code>geom_smooth(aes(...), ...)\ngeom_smooth(plot::GGPlot, aes(...), ...)\n</code></pre> <p>Represent data as a smoothed or linear fit.</p> <p>Arguments</p> <ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.Lines)</li> </ul> <p>Required Aesthetics</p> <ul> <li><code>x</code></li> <li><code>y</code></li> </ul> <p>Optional Aesthetics (see <code>aes</code>)</p> <ul> <li>NA</li> </ul> <p>Optional Arguments</p> <ul> <li><code>method</code>: either \"smooth\" (default, loess fit) or \"lm\" (linear fit)</li> <li><code>color</code> / <code>colour</code></li> <li><code>linewidth</code></li> <li><code>alpha</code></li> <li><code>linestyle</code> / <code>linetype</code></li> </ul> <p>Examples</p> <pre><code>xs = range(0, 2pi, length=30)\nys = sin.(xs) .+ randn(length(xs)) * 0.5\ndf = DataFrame(x = xs, y = ys)\n\nggplot(df, @aes(x = x, y = y)) + geom_smooth() + geom_point()\n\nggplot(penguins, @aes(x = bill_length_mm, y = bill_depth_mm)) +\n    geom_smooth(color=:red, linewidth=10, alpha=0.5)\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_step</code> \u2014 Function.</p> <pre><code>geom_step(aes(...), ...)\ngeom_step(plot::GGPlot, aes(...), ...)\n</code></pre> <p>Represents data as a stairstep plot.</p> <p>Arguments</p> <ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.Stairs)</li> </ul> <p>Required Aesthetics</p> <ul> <li><code>x</code></li> <li><code>y</code></li> </ul> <p>Optional Aesthetics (see <code>aes</code>)</p> <ul> <li><code>color</code> / <code>colour</code></li> </ul> <p>Optional Arguments</p> <ul> <li><code>color</code> / <code>colour</code></li> <li><code>colormap</code> / <code>palette</code></li> <li><code>linestyle</code> / <code>linetype</code></li> <li><code>linewidth</code></li> <li><code>alpha</code></li> </ul> <p>Examples</p> <pre><code>xs = range(0, 2pi, length=30)\ndf = DataFrame(x = xs, y = sin.(xs))\n\nggplot(df, @aes(x = x, y = y)) + geom_step()\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_text</code> \u2014 Function.</p> <pre><code>geom_text(aes(...), ...)\ngeom_text(plot::GGPlot, aes(...), ...)\n</code></pre> <p>Plot text on a graph.</p> <p>Arguments</p> <ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.Text)</li> </ul> <p>Required Aesthetics</p> <ul> <li><code>x</code></li> <li><code>y</code></li> <li><code>text</code></li> </ul> <p>Optional Aesthetics (see <code>aes</code>)</p> <ul> <li><code>color</code> / <code>colour</code></li> </ul> <p>Optional Arguments</p> <ul> <li><code>color</code> / <code>colour</code></li> <li><code>colormap</code> / <code>palette</code></li> <li><code>align</code>: tuple of positions (e.g. <code>(:left, :bottom)</code>)</li> <li><code>font</code></li> <li><code>justification</code></li> <li><code>rotation</code></li> <li><code>fontsize</code></li> <li><code>strokewidth</code></li> <li><code>strokecolor</code></li> <li><code>glowwidth</code> / <code>glow</code></li> <li><code>glowcolor</code> / <code>glowcolour</code></li> <li><code>word_wrap_width</code></li> <li><code>alpha</code></li> </ul> <p>Examples</p> <pre><code>df = DataFrame(\n    x = [1,1,2,2],\n    y = [1,2,1,2],\n    t = [\"A\", \"B\", \"C\", \"D\"]\n)\n\nggplot(df, @aes(x=x, y=y, text=t, color=t)) + geom_text()\n\nggplot(df, @aes(x=x, y=y, color=t)) +\n    geom_text(@aes(text=t), fontsize=24, align=(:left, :bottom), font=:bold) +\n    geom_point() +\n    lims(x = (0, 3), y = (0, 3))\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_tile</code> \u2014 Function.</p> <pre><code>geom_tile(aes(...), ...)\ngeom_tile(plot::GGPlot, aes(...), ...)\n</code></pre> <p>Plots a heatmap as a collection of rectangles.</p> <p>Details</p> <p><code>x</code>, <code>y</code>, and <code>z</code> must all be the same length, and there must be no duplicate (x, y) pairs. You can think of <code>x</code>, <code>y</code>, and <code>z</code> as triples of the form <code>(x, y, f(x, y))</code>.</p> <p>Arguments</p> <ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.Heatmap)</li> </ul> <p>Required Aesthetics</p> <ul> <li><code>x</code></li> <li><code>y</code></li> <li><code>z</code></li> </ul> <p>Optional Aesthetics (see <code>aes</code>)</p> <ul> <li>NA</li> </ul> <p>Optional Arguments</p> <ul> <li><code>interpolate=false</code></li> <li><code>colormap</code> / <code>palette</code></li> <li><code>alpha</code></li> </ul> <p>Examples</p> <pre><code>function mandelbrot(x, y)\n    z = c = x + y*im\n    for i in 1:30.0; abs(z) &gt; 2 &amp;&amp; return i; z = z^2 + c; end; 0\nend\n\nxs = -2:0.01:1\nys = -1.1:0.01:1.1\nxys = Iterators.product(xs, ys) |&gt; collect |&gt; vec\nzs = map(xy -&gt; mandelbrot(xy[1], xy[2]), xys)\n\ndf = DataFrame(\n    x = first.(xys),\n    y = last.(xys),\n    z = zs\n)\n\nggplot(df, @aes(x = x, y = y, z = z)) + geom_tile()\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_violin</code> \u2014 Function.</p> <pre><code>geom_(aes(...), ...)\ngeom_(plot::GGPlot, aes(...), ...)\n</code></pre> <p>Represents data as a violin plot.</p> <p>Arguments</p> <ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.Violin)</li> </ul> <p>Required Aesthetics</p> <ul> <li><code>x</code> (integer or categorical)</li> <li><code>y</code> (numeric)</li> </ul> <p>Optional Aesthetics (see <code>aes</code>)</p> <ul> <li><code>color</code> / <code>colour</code> (used in conjunction with <code>dodge</code>)</li> <li><code>dodge</code></li> </ul> <p>Optional Arguments</p> <ul> <li><code>orientation=:vertical</code>: orientation of box (<code>:vertical</code> or <code>:horizontal</code>)</li> <li><code>width=1</code></li> <li><code>gap=0.2</code></li> <li><code>show_notch=false</code></li> <li><code>nothchwidth=0.5</code></li> <li><code>show_median=true</code></li> <li><code>dodge_gap=0.03</code></li> </ul> <p>Examples</p> <pre><code>ggplot(penguins, @aes(x=species, y=bill_length_mm)) +\n    geom_violin()\n\nggplot(penguins, @aes(x=species, y=bill_length_mm)) +\n    geom_violin(orientation=:horizontal)\n\nggplot(penguins, @aes(x=species, y=bill_length_mm, fill=sex, dodge=sex)) +\n    geom_violin()\n</code></pre> <p>source</p> <p># <code>TidierPlots.geom_vline</code> \u2014 Method.</p> <pre><code>geom_vline(aes(...), ...)\ngeom_vline(plot::GGPlot, aes(...), ...)\n</code></pre> <p>Plot a horizontal line at the given y-intercept(s).</p> <p>Arguments</p> <ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.VLines)</li> </ul> <p>Required Aesthetics</p> <ul> <li>NA</li> </ul> <p>Optional Aesthetics (see <code>aes</code>)</p> <ul> <li><code>xintercept(s)</code></li> <li><code>color</code> / <code>colour</code></li> </ul> <p>Optional Arguments</p> <ul> <li><code>xintercept(s)</code></li> <li><code>color</code> / <code>colour</code></li> <li><code>linewidth</code></li> <li><code>linestyle</code> / <code>linetype</code></li> <li><code>colormap</code> / <code>palette</code></li> <li><code>alpha</code></li> </ul> <p>Examples</p> <pre><code># Plot only a single x-intercept\nggplot() + geom_vline(xintercept = 3)\n\n# Plot multiple x-intercepts\nggplot() + geom_vline(xintercept = [-1, 4])\n\n# Plot multiple x-intercepts mapped to a column\ndf = DataFrame(x = rand(4))\nggplot(df, @aes(xintercept = x)) + geom_vline()\n</code></pre> <p>source</p> <p># <code>TidierPlots.guides</code> \u2014 Method.</p> <p>Sets which scales will get legends or colorbars. Use the name of the scale and either the string \"legend\" or \"colorbar\" to add a guide.</p> <p>source</p> <p># <code>TidierPlots.label_bytes</code> \u2014 Method.</p> <pre><code>label_bytes(;units=:si, kwargs...)\n</code></pre> <p>Convert numeric values into human-readable strings representing byte sizes.</p> <p>Arguments</p> <ul> <li><code>units</code>: Can be <code>:si</code> for SI units (powers of 10), <code>:binary</code> for binary units (powers of 1024), or a specific unit string (e.g., MB, GiB).</li> <li><code>kwargs...</code>: Additional keyword arguments passed to <code>label_number</code>.</li> </ul> <p>Examples</p> <pre><code>labeler = label_bytes(units=:si)\nlabeler([1024, 2048]) # [\"1.02 KB\", \"2.05 KB\"]\n</code></pre> <p>source</p> <p># <code>TidierPlots.label_currency</code> \u2014 Method.</p> <pre><code>label_currency(;kwargs...)\n</code></pre> <p>Convert numeric values into currency strings.</p> <p>Arguments</p> <ul> <li><code>kwargs</code>: Additional keyword arguments passed to <code>label_number</code>.</li> </ul> <p>Examples</p> <pre><code>labeler = label_currency()\nlabeler([100, 200.75]) # [\"$100\", \"$200.75\"]\n</code></pre> <p>source</p> <p># <code>TidierPlots.label_date</code> \u2014 Method.</p> <pre><code>label_date(;format=\"m/d/Y\")\n</code></pre> <p>Convert Date or DateTime values into formatted strings.</p> <p>Arguments</p> <ul> <li><code>format</code>: A date format string.</li> </ul> <p>Examples</p> <pre><code>labeler = label_date(format=\"Y-m-d\")\nlabeler([Date(2020, 1, 1)]) # [\"2020-1-1\"]\n</code></pre> <p>source</p> <p># <code>TidierPlots.label_log</code> \u2014 Method.</p> <pre><code>label_log(;base=10, kwargs...)\n</code></pre> <p>Convert numeric values into logarithmic strings with a specified base.</p> <p>Arguments</p> <ul> <li><code>base</code>: The logarithmic base.</li> <li><code>kwargs</code>: Additional keyword arguments passed to <code>label_number</code>.</li> </ul> <p>Examples</p> <pre><code>labeler = label_log(base=10)\nlabeler([10, 100]) # [\"10^1\", \"10^2\"]\n</code></pre> <p>source</p> <p># <code>TidierPlots.label_number</code> \u2014 Method.</p> <pre><code>label_number(;precision=2, scale=1, prefix=\"\", suffix=\"\", decimal_mark=\".\", comma_mark=\",\", style_positive=:none, style_negative=:hyphen, kwargs...)\n</code></pre> <p>Format numeric values as strings with various styling options.</p> <p>Arguments</p> <ul> <li><code>precision</code>: Number of decimal places.</li> <li><code>scale</code>: Scaling factor applied to the numbers before formatting.</li> <li><code>prefix</code>: String to prepend to the number.</li> <li><code>suffix</code>: String to append to the number.</li> <li><code>decimal_mark</code>: Character to use as the decimal point.</li> <li><code>comma_mark</code>: Character to use as the thousands separator.</li> <li><code>style_positive</code>: Style for positive numbers (:none, :plus, :space).</li> <li><code>style_negative</code>: Style for negative numbers (:hyphen, :parens).</li> <li><code>kwargs</code>: Additional keyword arguments passed on to <code>format</code> from <code>Format.jl</code></li> </ul> <p>Examples</p> <pre><code>labeler = label_number(precision=0, suffix=\"kg\")\nlabeler([1500.12, -2000.12]) # [\"1,500kg\", \"-2,000kg\"]\n</code></pre> <p>source</p> <p># <code>TidierPlots.label_ordinal</code> \u2014 Method.</p> <pre><code>label_ordinal(;kwargs...)\n</code></pre> <p>Convert numeric values into ordinal strings (e.g., 1st, 2nd, 3rd).</p> <p>Arguments</p> <ul> <li><code>kwargs</code>: Additional keyword arguments passed to <code>label_number</code>.</li> </ul> <p>Examples</p> <pre><code>labeler = label_ordinal()\nlabeler([1, 2, 3]) # [\"1st\", \"2nd\", \"3rd\"]\n</code></pre> <p>source</p> <p># <code>TidierPlots.label_percent</code> \u2014 Method.</p> <pre><code>label_percent(;kwargs...)\n</code></pre> <p>Convert numeric values into percentage strings.</p> <p>Arguments</p> <ul> <li><code>kwargs</code>: Additional keyword arguments passed to <code>label_number</code>.</li> </ul> <p>Examples</p> <pre><code>labeler = label_percent()\nlabeler([0.1, 0.256]) # [\"10%\", \"25.6%\"]\n</code></pre> <p>source</p> <p># <code>TidierPlots.label_pvalue</code> \u2014 Method.</p> <pre><code>label_pvalue(;precision=2, kwargs...)\n</code></pre> <p>Format p-values, handling very small or large values with special notation.</p> <p>Arguments</p> <ul> <li><code>precision</code>: Number of decimal places for thresholding small values.</li> <li><code>kwargs</code>: Additional keyword arguments passed to <code>label_number</code>.</li> </ul> <p>Examples</p> <pre><code>labeler = label_pvalue()\nlabeler([0.0001, 0.05, 0.9999]) # [\"&lt;0.01\", \"0.05\", \"&gt;0.99\"]\n</code></pre> <p>source</p> <p># <code>TidierPlots.label_scientific</code> \u2014 Method.</p> <pre><code>label_scientific(;kwargs...)\n</code></pre> <p>Convert numeric values into scientific notation strings.</p> <p>Arguments</p> <ul> <li><code>kwargs</code>: Additional keyword arguments passed to <code>label_number</code>.</li> </ul> <p>Examples</p> <pre><code>labeler = label_scientific()\nlabeler([1000, 2000000]) # [\"1e+03\", \"2e+06\"]\n</code></pre> <p>source</p> <p># <code>TidierPlots.label_wrap</code> \u2014 Method.</p> <pre><code>label_wrap(width)\n</code></pre> <p>Wrap text strings to a specified width, breaking at spaces.</p> <p>Arguments</p> <ul> <li><code>width</code>: The maximum number of characters in a line before wrapping.</li> </ul> <p>Examples</p> <pre><code>labeler = label_wrap(10)\nlabeler([\"This is a long sentence.\"]) # [\"This is a\nlong\nsentence.\"]\n</code></pre> <p>source</p> <p></p> <p></p>"},{"location":"reference/#reference-internal-functions","title":"Reference - Internal functions","text":"<p># <code>TidierPlots.alpha_scale_to_ggoptions</code> \u2014 Method.</p> <p>Internal function. Converts args_dict to AxisOptions.</p> <p>source</p> <p># <code>TidierPlots.handle_point_color_and_fill</code> \u2014 Method.</p> <p>Color and fill work slightly strangely in geom_point in ggplot2. Replicates behaviour.</p> <p>source</p> <p># <code>TidierPlots.linewidth_scale_to_ggoptions</code> \u2014 Method.</p> <p>Internal function. Converts args_dict to AxisOptions.</p> <p>source</p> <p># <code>TidierPlots.make_alpha_lookup_continuous</code> \u2014 Method.</p> <p>Internal function. Takes a Dict and makes a function that maps a numeric vector to the range specfied in the Dict's :range key, or to [0.1, 1.0] if not specified.</p> <p>source</p> <p># <code>TidierPlots.make_linewidth_lookup_continuous</code> \u2014 Method.</p> <p>Internal function. Takes a Dict and makes a function that maps a numeric vector to the range specfied in the Dict's :range key, or to [0.1, 1.0] if not specified.</p> <p>source</p> <p># <code>TidierPlots.position_facets</code> \u2014 Function.</p> <p>Internal function. Given a list of names and (optionally) some constraints, return the relative position of the facets and their labels.</p> <p>source</p> <p># <code>TidierPlots.scale_custom</code> \u2014 Function.</p> <pre><code>scale_custom(aes, function, legend_options = Dict())\nscale_custom(plot, aes, function, legend_options = Dict())\n</code></pre> <p>Create a custom scale for any aes.</p> <p>Arguments</p> <ul> <li><code>plot</code>: Optional. GGPlot to apply this scale to</li> <li><code>aes</code>: The aes that the scale is for</li> <li><code>f</code>: Function to apply to the raw data. Should accept one argument (vector of data as it appears in your DataFrame) and return a vector in the format expected by Makie.</li> <li><code>legend_options</code>: Used to generate the guides for the plot</li> </ul> <p>source</p> <p># <code>TidierPlots.shape_scale_to_ggoptions</code> \u2014 Method.</p> <p>Internal function. Converts args_dict to AxisOptions.</p> <p>source</p> <p># <code>TidierPlots.size_scale_to_ggoptions</code> \u2014 Method.</p> <p>Internal function. Converts args_dict to AxisOptions.</p> <p>source</p>"},{"location":"examples/generated/Contributors/contributing/","title":"Contribute","text":""},{"location":"examples/generated/Contributors/contributing/#contribute-to-documentation","title":"Contribute to Documentation","text":"<p>Examples are written and rendered using Literate.jl. This allows you to write your example in a <code>.jl</code> file and annotate it with markdown.</p> <p>Contributing with examples can be done by first creating a new example file in the docs/examples/UserGuide directory:</p> <p>Info</p> <ul> <li><code>your_new_file.jl</code> at <code>docs/examples/UserGuide/</code></li> </ul> <p>Once this is done you need to add a new nav entry to the mkdocs.yml file at the bottom at the appropriate level:</p> <p>Info</p> <p>Your new entry should look like:</p> <ul> <li><code>\"Your title example\" : \"examples/generated/UserGuide/your_new_file.md\"</code></li> </ul> <p></p> <p></p>"},{"location":"examples/generated/Contributors/contributing/#build-docs-locally","title":"Build docs locally","text":"<p>If you want to take a look at the docs locally before doing a PR, then follow the next steps:</p> <p>Build docs locally</p> <p>Install the following dependencies in your system via pip, i.e.</p> <ul> <li><code>pip install mkdocs pygments python-markdown-math</code></li> <li><code>pip install mkdocs-material pymdown-extensions mkdocstrings</code></li> <li><code>pip install mknotebooks pytkdocs_tweaks mkdocs_include_exclude_files jinja2 mkdocs-video</code></li> </ul> <p>Next you will need to activate the <code>docs</code> environment:</p> <pre><code>TidierPlots.jl&gt; julia --project=docs/ -e 'using Pkg; pkg\"dev .\"; Pkg.instantiate()'\n</code></pre> <p>Generate files and build the docs by running the following in your terminal:</p> <pre><code>TidierPlots.jl&gt; julia --project=docs/ --color=yes docs/genfiles.jl\nTidierPlots.jl&gt; julia --project=docs/ --color=yes docs/make.jl\n</code></pre> <p>Set environment variables</p> <p>You may want to set additional Julia environment variables before running <code>make.jl</code>. This will enable additional debugging messages while building the docs.</p> <ul> <li><code>ENV[\"JULIA_DEBUG\"] = \"Documenter\"</code></li> </ul> <p>Finally, in your <code>terminal</code>, change directory to the <code>docs</code> folder and run:</p> <pre><code>docs&gt; mkdocs serve\n</code></pre> <p>This should output <code>http://127.0.0.1:8000</code>, copy/paste this into your browser and you are all set. You can leave this server running while making changes to the docs. You can open a new terminal and re-run <code>genfiles.jl</code> and <code>make.jl</code> to see the changes.</p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/gettingstarted/","title":"Getting Started","text":"<pre><code>using TidierPlots\nusing DataFrames\nusing PalmerPenguins\n\npenguins = dropmissing(DataFrame(PalmerPenguins.load()));\n</code></pre>"},{"location":"examples/generated/UserGuide/gettingstarted/#ggplot","title":"<code>ggplot()</code>","text":"<p><code>ggplot()</code> is the starting point of any plot. It sets up the initial plot with default settings that can be later customized with geoms, scales, theme settings and other specifications. <code>ggplot</code> usually used with a data source as an argument, and optionally, a set of aesthetics specified by @aes(). The data source is typically a DataFrame.</p> <p>If a set of aesthetics is specified in the initial ggplot call, these aesthetics apply to all layers added to the plot, unless they are overridden in subsequent layers.</p> <pre><code>ggplot(penguins, @aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n    geom_point()\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/gettingstarted/#aes","title":"<code>@aes()</code>","text":"<p><code>aes()</code> is used to map variables in your data to visual properties (aesthetics) of the plot. These aesthetics can include things like position (x and y coordinates), color, shape, size, etc. Each aesthetic is a way of visualizing a variable or a statistical transformation of a variable.</p> <p>Aesthetics are specified in the form aes(aesthetic = variable), where aesthetic is the name of the aesthetic, and variable is the column name in your data that you want to map to the aesthetic. The variable names do not need to be preceded by a colon.</p> <p>Of note, TidierPlots.jl accepts multiple forms for aes specification, none of which is exactly the same as ggplot2.</p> <ul> <li>Option 1: <code>@aes</code> macro, aes as in ggplot, e.g. <code>@aes(x = x, y = y)</code></li> <li>Option 2: <code>@es</code> macro, aes as in ggplot, e.g. <code>@es(x = x, y = y)</code></li> <li>Option 3: <code>aes</code> function, julia-style columns, e.g. <code>aes(x = :x, y = :y)</code></li> <li>Option 4: <code>aes</code> function, strings for columns, e.g. <code>aes(x = \"x\", y = \"y\")</code></li> </ul> <p>The examples below will generally use option 1</p> <p>In the above example, we can see that the x, y, and color aesthetics are being mapped to each subsequent layer of the plot.</p> <p>In general, <code>aes()</code> can be used within the <code>ggplot</code>  to set global aesthetics that apply to all layers, or within individual geoms to set aesthetics that apply only to that layer.</p> <p>Moving from general rules, to specific plots, let us first explore <code>geom_point()</code></p> <p><code>geom_point()</code> <code>geom_point</code> is used to create a scatter plot. It is typically used with aesthetics mapping variables to x and y positions, and optionally to other aesthetics like color, shape, and size. <code>geom_point</code> can be used to visualize the relationship between two continuous variables, or a continuous and a discrete variable. The following visuals features can be changed within <code>geom_point()</code>, shape, size, stroke, strokecolour, and alpha .</p> <pre><code>ggplot(penguins, @aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n    geom_point( size = 20,\n                stroke = 1,\n                strokecolor = \"black\",\n                alpha = 0.2) +\n    labs(x = \"Bill Length (mm)\", y = \"Bill Width (mm)\") +\n    lims(x = c(40, 60), y = c(15, 20)) +\n    theme_minimal()\n</code></pre> <p></p> <p>In the example above, a scatter plot is created with the variable billlengthmm mapped to the x position, and billdepthmm mapped to the y position with color mapped to species. Supported optional arguements include:</p> <ul> <li>size - this is the size of the marker</li> <li>alpha (or transparency), is set to a value between 0 and 1.</li> <li>strokecolor is the stroke color around the marker. https://juliagraphics.github.io/Colors.jl/stable/namedcolors/ colors can be chosen from any name on this list</li> <li>stroke this is the thickeness of the stroke around the marker</li> </ul> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/gettingstarted/#lims","title":"<code>lims</code>","text":"<p><code>lims</code> allows the user to set the ranges for the x and y axises as shown in the example above.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/gettingstarted/#geom_bar-geom_col-and-geom_histogram","title":"<code>geom_bar</code>, <code>geom_col</code>, and <code>geom_histogram</code>","text":"<p><code>geom_bar</code> is used to create bar plots for categorical data.  <code>geom_col</code>  is a special case of <code>geom_bar</code> where the height of the bars is already computed and does not need to be counted. <code>geom_histogram</code>  is used to create a histogram, which is essentially a bar plot for continuous data, where the data is divided into bins and the number of data points in each bin is counted.</p> <pre><code>ggplot(data=penguins, @aes(x=species)) +\n  geom_bar(aes(color = \"island\"), position = \"dodge\")\n</code></pre> <p></p> <p>geom_bar optional arguments include</p> <ul> <li>color, alpha as above</li> <li>position, when set to \"dodge,\" bar charts will not stack</li> </ul> <pre><code>ggplot(data=penguins, @aes(x = island, y=species)) +\n    geom_col()\n</code></pre> <p></p> <pre><code>ggplot() +\n  geom_histogram(data=penguins, @aes(x = bill_length_mm))\n</code></pre> <p></p> <p>In the first example, a bar plot is created with the variable CategoricalVar mapped to the x position, and the count of each category is represented by the height of the bars.</p> <p>In the second example, a column plot is created with the variable CategoricalVar mapped to the x position, and ComputedHeight mapped to the y position.</p> <p>A histogram is created with the continuous variable, billlengthmm, mapped to the x position, and the data is divided into bins, with the count in each bin represented by the height of the bars.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/gettingstarted/#geom_path-and-geom_line","title":"<code>geom_path</code> and <code>geom_line</code>","text":"<p>The <code>geom_path</code> and <code>geom_line</code>  are used to create line plots. <code>geom_path</code> connects the data points in the order they appear in the data, while <code>geom_line</code> connects the data points in order of the x-values.</p> <pre><code>x_values = 1:10;\ny_values = x_values .^ 2;\ndf_line = DataFrame(X = x_values, Y = y_values);\nggplot(df_line) +\n    geom_line(@aes(x = X, y = Y)) +\n    labs(title = \"Line Plot Example\", x = \"X axis\", y = \"Y axis\")+\n    theme_dark()\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/gettingstarted/#geom_step","title":"<code>geom_step</code>","text":"<p><code>geom_step</code> creates a step plot, which is similar to a line plot but with a step pattern rather than a direct line from point to point.</p> <pre><code>ggplot(df_line, @aes(x = X, y = Y)) +\n    geom_step() +\n    labs(title = \"Step Plot Example\", x = \"X axis\", y = \"Y axis\")+\n    theme_minimal()\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/gettingstarted/#geom_boxplot","title":"<code>geom_boxplot</code>","text":"<p><code>geom_boxplot</code> creates a boxplot.</p> <pre><code>ggplot()+\n  geom_boxplot(data=penguins, @aes(x = island, y = bill_length_mm))\n</code></pre> <p></p> <p>In this example, a boxplot is created where different island of penguins are mapped to the x position, and the bill length is mapped to the y position. Finally, the each species will be mapped to a different color</p> <p>geom_boxplot supported optinal arguements currently include:</p> <ul> <li>color - if used within the aes() with a categorical variable it will make each category a different color as shown above. When used outside of the aes() and selected with a color, it will make each boxplot that color.</li> <li>alpha - transaparency as above, used outside of the aes()</li> </ul> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/gettingstarted/#geom_violin","title":"<code>geom_violin</code>","text":"<p><code>geom_violin</code>  creates a violin plot, which is a combination of a boxplot and a kernel density plot.</p> <pre><code>ggplot(penguins, @aes(x = species, y = bill_depth_mm)) +\n    geom_violin()\n</code></pre> <p></p> <p>In this example, a violin plot is created where different species of penguins are mapped to the x position, and the bill depth is mapped to the y position. geom_violin does not currently support mapping a categorical variable to colors.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/gettingstarted/#geom_tile","title":"<code>geom_tile</code>","text":"<p>The <code>geom_tile</code> creates a tile plot, also known as a heatmap.</p> <pre><code>x_values = repeat(1:5, inner = 5);\ny_values = repeat(1:5, outer = 5);\nvalues = x_values .* y_values;\ndf_tile = DataFrame(X = x_values, Y = y_values, Value = values);\n\nggplot(df_tile, @aes(x = X, y = Y, z = Value)) +\n    geom_tile() +\n    labs(title = \"Tile Plot Example\", x = \"X axis\", y = \"Y axis\")\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/gettingstarted/#geom_text-and-geom_label","title":"<code>geom_text</code> and <code>geom_label</code>","text":"<p><code>geom_text</code> and <code>geom_label</code>  are used to add text and labels to a plot.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/gettingstarted/#combining-plots","title":"Combining plots","text":"<p>Similar to the <code>patchwork</code> library in R, plots can be combined horizontally using the <code>+</code> and <code>|</code> operators and vertically with the <code>/</code> operator.</p> <pre><code>plot = ggplot(df_tile, @aes(x = X, y = Y, z = Value)) +\n           geom_tile();\n\nplot | plot\n\nplot / plot\n</code></pre> <p></p> <p>These extend beyond two plots, but must be used in functional form for <code>|</code> and <code>/</code>.</p> <pre><code>plot + plot + plot\n\n/(plot, plot, plot)\n</code></pre> <p></p> <p>Grids of plots can also be combined using parethesis to delimit grid boundaries.</p> <pre><code>((plot + plot + plot) | plot) / (plot / plot)\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/gettingstarted/#scale_x_continuous-scale_y_continuous","title":"<code>scale_x_continuous</code>,  <code>scale_y_continuous</code>","text":"<p><code>scale_x_continuous</code> and <code>scale_y_continuous</code> can apply labels and scales, reverse, or adjust the ticks for the axis.</p> <pre><code>ggplot(penguins, @aes(x = body_mass_g, y = bill_length_mm)) +\n    geom_point() +\n    scale_x_continuous(\n        name=\"Mass (g)\",\n        trans=log10\n    ) +\n    scale_y_continuous(\n        name=\"Length\",\n        reversed = true,\n        labels=label_number(;suffix=\"mm\")\n    )\n</code></pre> <p></p> <p>The <code>trans</code> argument takes as input a function which takes in and outputs numerical values. and <code>labels</code> argument can be a string specification from <code>Format.jl</code> or a function which formats a list of strings. Available label generators are:</p> <ul> <li><code>label_bytes</code></li> <li><code>label_currency</code></li> <li><code>label_date</code></li> <li><code>label_log</code></li> <li><code>label_number</code></li> <li><code>label_ordinal</code></li> <li><code>label_percent</code></li> <li><code>label_pvalue</code></li> <li><code>label_scientific</code></li> <li><code>label_wrap</code></li> </ul> <p>Each of these will accept keywords arguments to generate a label function compatible with the <code>labels</code> argument.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/gettingstarted/#scale_x_log10-scale_y_log10","title":"<code>scale_x_log10</code>,  <code>scale_y_log10</code>","text":"<p><code>scale_x_log10</code> and <code>scale_y_log10</code> apply a base 10 logarithmic transformation to the x and y axes, respectively.</p> <pre><code>ggplot(penguins, @aes(x = body_mass_g, y = bill_length_mm)) +\n    geom_point() +\n    scale_x_log10()\n</code></pre> <p></p> <p>In this example, a scatter plot is created where the body mass of penguins is mapped to the x position and the bill length to the y position. A base 10 logarithmic transformation is then applied to the x-axis.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/gettingstarted/#scale_x_log2-scale_y_log2-scale_x_log-scale_y_log","title":"<code>scale_x_log2</code>, <code>scale_y_log2</code>, <code>scale_x_log</code>, <code>scale_y_log</code>","text":"<p>These work similarly to the previous ones, but apply a base 2 or base e logarithmic transformation to the x and y axes, respectively.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/gettingstarted/#scale_x_logit-scale_y_logit","title":"<code>scale_x_logit</code>, <code>scale_y_logit</code>","text":"<p><code>scale_x_logit</code> and `scaleylogit apply a logit transformation to the x and y axes, respectively. This transformation is often used when visualizing proportions or probabilities.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/gettingstarted/#scale_x_pseudolog10-scale_y_pseudolog10-scale_x_symlog10-scale_y_symlog10","title":"<code>scale_x_pseudolog10</code>, <code>scale_y_pseudolog10</code>, <code>scale_x_Symlog10</code>, <code>scale_y_Symlog10</code>","text":"<p>These apply different types of logarithmic transformations to the x and y axes. The \"pseudo\" and \"Symlog\" transformations are designed to handle zeros and negative values more effectively.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/gettingstarted/#scale_x_reverse-scale_y_reverse","title":"<code>scale_x_reverse</code>, <code>scale_y_reverse</code>","text":"<p><code>scale_x_reverse</code> and <code>scale_y_reverse</code>  reverse the direction of the x and y axes, respectively.</p> <pre><code>ggplot(penguins, @aes(x = body_mass_g, y = bill_length_mm, color = species)) +\n   geom_point() +\n   scale_y_reverse() +\n   theme_minimal()\n</code></pre> <p></p> <p>In this example, a scatter plot is created where the body mass of penguins is mapped to the x position and the bill length to the y position. The direction of the y-axis is then reversed.</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/gettingstarted/#scale_x_sqrt-scale_y_sqrt","title":"<code>scale_x_sqrt</code>, <code>scale_y_sqrt</code>","text":"<p><code>scale_x_sqrt</code> and <code>scale_y_sqrt</code>  apply a square root transformation to the x and y axes, respectively.</p> <pre><code>ggplot(penguins, @aes(x = body_mass_g, y = bill_length_mm, color = species)) +\n   geom_point() +\n   scale_x_sqrt() +\n   theme_minimal()\n</code></pre> <p></p> <p>In this example, a scatter plot is created where the body mass of penguins is mapped to the x position and the bill length to the y position. A square root transformation is then applied to the x-axis</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/gettingstarted/#geom_errorbar","title":"<code>geom_errorbar</code>","text":"<p><code>geom_errorbar</code> creates vertical and error bars .</p> <pre><code>categories = [\"A\", \"B\", \"C\", \"D\"];\nn = length(categories);\n\nmean_values = rand(n);  # Random mean values for demonstration\nerrors = rand(n) / 2;   # Random error values for demonstration\n\nLowerBound = mean_values .- errors;\nUpperBound = mean_values .+ errors;\n\ndf_errorbar = DataFrame(\n    Category = categories,\n    MeanValue = mean_values,\n    LowerBound = LowerBound,\n    UpperBound = UpperBound);\n\nggplot(df_errorbar, @aes(x = Category, y = MeanValue, ymin = LowerBound, ymax = UpperBound)) +\n    geom_point() + # to show the mean value\n    geom_errorbar() +\n    labs(title = \"Error Bar Plot Example\", x = \"Category\", y = \"Mean Value\")\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/gettingstarted/#ggsave","title":"<code>ggsave</code>","text":"<p><code>ggsave</code> saves a GGPlot to the specified location.</p> <pre><code>plot = ggplot(penguins, @aes(x = body_mass_g, y = bill_length_mm, color = species)) +\n           geom_point()\n\nggsave(plot, \"penguin_points.png\")\n</code></pre> <p>In this example, <code>plot</code> is saved to <code>penguin_points.png</code>. Acceptable filetypes are all those supported by CairoMakie: <code>svg</code>, <code>pdf</code>, and <code>png</code>.</p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/geoms/geom_bar/","title":"geom_bar","text":"<pre><code>using TidierPlots\nusing DataFrames\nusing PalmerPenguins\n\npenguins = dropmissing(DataFrame(PalmerPenguins.load()));\n</code></pre> <p>vertical bar plot</p> <pre><code>ggplot(penguins) + geom_bar(@aes(x = species))\n</code></pre> <p></p> <p>horizontal bar plot</p> <pre><code>ggplot(penguins) + geom_bar(@aes(y = species))\n</code></pre> <p></p> <p>stacked</p> <pre><code>ggplot(penguins, @aes(x = species, fill=sex)) + geom_bar()\n</code></pre> <p></p> <p>dodged</p> <pre><code>ggplot(penguins, @aes(x = species, fill=sex, dodge = sex)) + geom_bar()\n</code></pre> <p></p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/geoms/geom_boxplot/","title":"geom_boxplot","text":"<pre><code>using TidierPlots\nusing DataFrames\nusing PalmerPenguins\n\npenguins = dropmissing(DataFrame(PalmerPenguins.load()));\n</code></pre> <pre><code>ggplot(penguins, @aes(x=species, y=bill_length_mm)) +\n    geom_boxplot()\n\nggplot(penguins, @aes(y=species, x=bill_length_mm)) +\n    geom_boxplot()\n\nggplot(penguins, @aes(x=species, y=bill_length_mm, fill=sex)) +\n    geom_boxplot()\n</code></pre> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/geoms/geom_col/","title":"geom_col","text":"<pre><code>using TidierPlots\nusing TidierData\nusing DataFrames\nusing PalmerPenguins\n\npenguins = dropmissing(DataFrame(PalmerPenguins.load()));\n\ndf = @chain penguins begin\n    @group_by(species, sex)\n    @summarize(mean_bill_length_mm = mean(bill_length_mm))\n    @ungroup()\nend\n</code></pre> 6\u00d73 DataFrame Rowspeciessexmean_bill_length_mmString15String7Float641Adeliemale40.39042Adeliefemale37.25753Gentoofemale45.56384Gentoomale49.47385Chinstrapfemale46.57356Chinstrapmale51.0941 <pre><code>ggplot(df, @aes(x = species, y = mean_bill_length_mm)) +\n    geom_col()\n</code></pre> <p>dodge using the group and position arguments</p> <pre><code>ggplot(df, @aes(x = species, y = mean_bill_length_mm, group = sex)) +\n    geom_col(position=\"dodge\")\n</code></pre> <p></p> <p>dodge using the dodge aesthetic</p> <pre><code>ggplot(df, @aes(x = species, y = mean_bill_length_mm, dodge = sex)) +\n    geom_col()\n</code></pre> <p></p> <p>color based on grouping variable</p> <pre><code>ggplot(df, @aes(x = species, y = mean_bill_length_mm, color = sex)) +\n    geom_col()\n</code></pre> <p></p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/geoms/geom_density/","title":"geom_density","text":"<pre><code>using TidierPlots\nusing DataFrames\nusing PalmerPenguins\n\npenguins = dropmissing(DataFrame(PalmerPenguins.load()));\n</code></pre> <pre><code>ggplot(penguins, @aes(x=bill_length_mm)) +\n    geom_density()\n</code></pre> <pre><code>ggplot(penguins, @aes(x=bill_length_mm)) +\n    geom_density(color = :black, stroke = 2)\n</code></pre> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/geoms/geom_errorbars/","title":"geom_errorbars","text":"<pre><code>using TidierPlots\nusing DataFrames\n\ndf = DataFrame(\n    trt   = [1, 1, 2, 2],\n    resp  = [1, 5, 3, 4],\n    group = [1, 2, 1, 2],\n    lower = [0.8, 4.6, 2.4, 3.6],\n    upper = [1.1, 5.3, 3.3, 4.2],\n)\n\nggplot(df, @aes(x = trt, ymin = lower, ymax = upper)) +\ngeom_errorbar(linewidth=2)\n\nggplot(df, @aes(y = trt, xmin = lower, xmax = upper)) +\n    geom_errorbarh(linewidth=2)\n</code></pre> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/geoms/geom_hist/","title":"geom_hist","text":"<pre><code>using TidierPlots\nusing DataFrames\nusing PalmerPenguins\n\npenguins = dropmissing(DataFrame(PalmerPenguins.load()));\n</code></pre> <pre><code>ggplot(penguins, @aes(x = bill_length_mm)) +\n    geom_histogram()\n</code></pre> <pre><code>ggplot(penguins, @aes(x = bill_length_mm)) +\n    geom_histogram(normalization = :probability, bins = 20)\n</code></pre> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/geoms/geom_hvlines/","title":"geom_hvlines","text":"<pre><code>using TidierPlots\nusing DataFrames\n</code></pre> <p>Plot only a single y-intercept</p> <pre><code>ggplot() + geom_hline(yintercept = 3)\n</code></pre> <p></p> <p>Plot multiple y-intercepts</p> <pre><code>ggplot() + geom_hline(yintercept = [-1, 4])\n</code></pre> <p></p> <p>Plot multiple y-intercepts mapped to a column</p> <pre><code>df = DataFrame(y = rand(4))\nggplot(df, @aes(yintercept = y)) + geom_hline()\n</code></pre> <p></p> <p>Plot only a single x-intercept</p> <pre><code>ggplot() + geom_vline(xintercept = 3)\n</code></pre> <p></p> <p>Plot multiple x-intercepts</p> <pre><code>ggplot() + geom_vline(xintercept = [-1, 4])\n</code></pre> <p></p> <p>Plot multiple x-intercepts mapped to a column</p> <pre><code>df = DataFrame(x = rand(4))\nggplot(df, @aes(xintercept = x)) + geom_vline()\n</code></pre> <p></p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/geoms/geom_lines/","title":"geom_lines","text":""},{"location":"examples/generated/geoms/geom_lines/#connect-observations","title":"Connect Observations","text":"<p><code>geom_path()</code> connects the observations in the order in which they appear in the data. <code>geom_line()</code> connects them in order of the variable on the x axis. <code>geom_step()</code> creates a stairstep plot, highlighting exactly when changes occur. The group aesthetic determines which cases are connected together.</p> <p></p> <p></p>"},{"location":"examples/generated/geoms/geom_lines/#arguments","title":"Arguments","text":"<ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to. This is typically used to facilitate creating your ggplot as part of a @chain.</li> <li><code>data</code> (DataFrame): Data to use for this geom. If not provided, the geom will inherit the data from ggplot.</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>inherit_aes</code>: should the geom inherit aes from the ggplot?</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.Lines)</li> </ul>"},{"location":"examples/generated/geoms/geom_lines/#required-aesthetics","title":"Required Aesthetics","text":"<ul> <li><code>x</code></li> <li><code>y</code></li> </ul>"},{"location":"examples/generated/geoms/geom_lines/#optional-aesthetics-see-aes","title":"Optional Aesthetics (see <code>aes</code>)","text":"<ul> <li><code>color</code> / <code>colour</code></li> <li><code>alpha</code></li> <li><code>group</code></li> <li><code>linetype</code></li> <li><code>linewidth</code></li> </ul> <pre><code>using TidierPlots\nusing TidierData\nusing DataFrames\nusing RDatasets\n\neconomics = dataset(\"ggplot2\", \"economics\")\neconomics_long = @pivot_longer(economics, -Date)\n</code></pre> 2390\u00d73 DataFrame RowDatevariablevalueDateStringFloat6411967-06-30PCE507.821967-07-31PCE510.931967-08-31PCE516.741967-09-30PCE513.351967-10-31PCE518.561967-11-30PCE526.271967-12-31PCE532.081968-01-31PCE534.791968-02-29PCE545.4101968-03-31PCE545.1111968-04-30PCE550.9121968-05-31PCE557.4131968-06-30PCE564.4141968-07-31PCE568.2151968-08-31PCE569.5161968-09-30PCE572.9171968-10-31PCE578.0181968-11-30PCE577.9191968-12-31PCE584.9201969-01-31PCE590.2211969-02-28PCE590.4221969-03-31PCE595.4231969-04-30PCE601.8241969-05-31PCE602.4251969-06-30PCE604.3261969-07-31PCE611.5271969-08-31PCE614.9281969-09-30PCE620.2291969-10-31PCE622.1301969-11-30PCE624.4311969-12-31PCE630.4321970-01-31PCE635.7331970-02-28PCE634.0341970-03-31PCE637.7351970-04-30PCE644.1361970-05-31PCE648.0371970-06-30PCE650.2381970-07-31PCE654.7391970-08-31PCE660.9401970-09-30PCE660.1411970-10-31PCE658.4421970-11-30PCE667.4431970-12-31PCE678.0441971-01-31PCE681.3451971-02-28PCE683.9461971-03-31PCE690.6471971-04-30PCE693.0481971-05-31PCE701.7491971-06-30PCE700.8501971-07-31PCE706.8511971-08-31PCE715.0521971-09-30PCE717.8531971-10-31PCE723.0541971-11-30PCE730.5551971-12-31PCE733.7561972-01-31PCE738.4571972-02-29PCE751.5581972-03-31PCE754.9591972-04-30PCE760.4601972-05-31PCE764.0611972-06-30PCE772.4621972-07-31PCE778.9631972-08-31PCE783.7641972-09-30PCE797.5651972-10-31PCE803.1661972-11-30PCE808.8671972-12-31PCE819.1681973-01-31PCE828.5691973-02-28PCE835.5701973-03-31PCE838.5711973-04-30PCE844.3721973-05-31PCE847.1731973-06-30PCE857.0741973-07-31PCE856.1751973-08-31PCE872.2761973-09-30PCE871.2771973-10-31PCE879.9781973-11-30PCE879.7791973-12-31PCE887.7801974-01-31PCE892.9811974-02-28PCE904.7821974-03-31PCE914.1831974-04-30PCE925.7841974-05-31PCE931.3851974-06-30PCE941.2861974-07-31PCE958.0871974-08-31PCE958.3881974-09-30PCE962.5891974-10-31PCE959.5901974-11-30PCE965.1911974-12-31PCE978.9921975-01-31PCE992.8931975-02-28PCE994.1941975-03-31PCE998.8951975-04-30PCE1022.8961975-05-31PCE1030.7971975-06-30PCE1043.8981975-07-31PCE1051.0991975-08-31PCE1058.91001975-09-30PCE1064.81011975-10-31PCE1079.71021975-11-30PCE1096.01031975-12-31PCE1111.21041976-01-31PCE1111.81051976-02-29PCE1119.01061976-03-31PCE1129.61071976-04-30PCE1126.81081976-05-31PCE1144.71091976-06-30PCE1153.81101976-07-31PCE1162.31111976-08-31PCE1173.21121976-09-30PCE1181.21131976-10-31PCE1193.51141976-11-30PCE1216.01151976-12-31PCE1219.31161977-01-31PCE1235.61171977-02-28PCE1242.61181977-03-31PCE1251.61191977-04-30PCE1261.51201977-05-31PCE1268.21211977-06-30PCE1285.21221977-07-31PCE1290.41231977-08-31PCE1299.41241977-09-30PCE1316.31251977-10-31PCE1332.01261977-11-30PCE1341.31271977-12-31PCE1335.21281978-01-31PCE1361.01291978-02-28PCE1383.61301978-03-31PCE1402.51311978-04-30PCE1418.21321978-05-31PCE1432.11331978-06-30PCE1433.21341978-07-31PCE1453.41351978-08-31PCE1459.41361978-09-30PCE1473.51371978-10-31PCE1487.11381978-11-30PCE1503.01391978-12-31PCE1508.91401979-01-31PCE1524.41411979-02-28PCE1537.71421979-03-31PCE1545.11431979-04-30PCE1565.51441979-05-31PCE1582.31451979-06-30PCE1592.61461979-07-31PCE1622.31471979-08-31PCE1640.81481979-09-30PCE1648.71491979-10-31PCE1664.51501979-11-30PCE1673.51511979-12-31PCE1704.11521980-01-31PCE1708.21531980-02-29PCE1714.91541980-03-31PCE1701.81551980-04-30PCE1706.61561980-05-31PCE1725.31571980-06-30PCE1753.61581980-07-31PCE1770.11591980-08-31PCE1786.61601980-09-30PCE1823.01611980-10-31PCE1833.01621980-11-30PCE1858.31631980-12-31PCE1877.71641981-01-31PCE1892.21651981-02-28PCE1911.31661981-03-31PCE1912.61671981-04-30PCE1921.71681981-05-31PCE1942.31691981-06-30PCE1949.61701981-07-31PCE1973.71711981-08-31PCE1972.11721981-09-30PCE1970.01731981-10-31PCE1976.01741981-11-30PCE1993.61751981-12-31PCE2001.11761982-01-31PCE2024.91771982-02-28PCE2028.11781982-03-31PCE2030.51791982-04-30PCE2049.31801982-05-31PCE2053.51811982-06-30PCE2078.31821982-07-31PCE2086.91831982-08-31PCE2112.01841982-09-30PCE2133.81851982-10-31PCE2158.11861982-11-30PCE2170.81871982-12-31PCE2183.61881983-01-31PCE2186.51891983-02-28PCE2212.21901983-03-31PCE2235.31911983-04-30PCE2254.71921983-05-31PCE2284.71931983-06-30PCE2313.21941983-07-31PCE2329.21951983-08-31PCE2343.41961983-09-30PCE2366.21971983-10-31PCE2375.01981983-11-30PCE2402.71991983-12-31PCE2428.62001984-01-31PCE2412.82011984-02-29PCE2441.32021984-03-31PCE2467.62031984-04-30PCE2485.02041984-05-31PCE2506.52051984-06-30PCE2505.72061984-07-31PCE2523.82071984-08-31PCE2545.42081984-09-30PCE2543.62091984-10-31PCE2584.02101984-11-30PCE2595.32111984-12-31PCE2629.62121985-01-31PCE2650.52131985-02-28PCE2657.12141985-03-31PCE2668.82151985-04-30PCE2705.02161985-05-31PCE2696.42171985-06-30PCE2720.52181985-07-31PCE2756.02191985-08-31PCE2799.72201985-09-30PCE2762.32211985-10-31PCE2778.72221985-11-30PCE2819.12231985-12-31PCE2833.52241986-01-31PCE2826.72251986-02-28PCE2830.72261986-03-31PCE2843.82271986-04-30PCE2867.82281986-05-31PCE2874.22291986-06-30PCE2895.92301986-07-31PCE2914.82311986-08-31PCE2989.82321986-09-30PCE2951.62331986-10-31PCE2948.52341986-11-30PCE3019.52351986-12-31PCE2959.72361987-01-31PCE3026.72371987-02-28PCE3037.62381987-03-31PCE3061.22391987-04-30PCE3070.12401987-05-31PCE3094.82411987-06-30PCE3118.22421987-07-31PCE3155.22431987-08-31PCE3151.32441987-09-30PCE3159.62451987-10-31PCE3169.32461987-11-30PCE3199.02471987-12-31PCE3238.62481988-01-31PCE3246.22491988-02-29PCE3285.52501988-03-31PCE3288.02511988-04-30PCE3318.52521988-05-31PCE3342.72531988-06-30PCE3365.62541988-07-31PCE3390.02551988-08-31PCE3396.62561988-09-30PCE3436.32571988-10-31PCE3452.42581988-11-30PCE3482.82591988-12-31PCE3505.32601989-01-31PCE3509.32611989-02-28PCE3519.32621989-03-31PCE3563.22631989-04-30PCE3571.82641989-05-31PCE3586.72651989-06-30PCE3606.42661989-07-31PCE3642.22671989-08-31PCE3644.22681989-09-30PCE3657.02691989-10-31PCE3667.62701989-11-30PCE3708.92711989-12-31PCE3754.52721990-01-31PCE3752.22731990-02-28PCE3781.02741990-03-31PCE3800.52751990-04-30PCE3808.62761990-05-31PCE3838.52771990-06-30PCE3855.12781990-07-31PCE3881.02791990-08-31PCE3902.72801990-09-30PCE3902.92811990-10-31PCE3905.62821990-11-30PCE3896.62831990-12-31PCE3879.32841991-01-31PCE3907.72851991-02-28PCE3955.62861991-03-31PCE3950.52871991-04-30PCE3976.82881991-05-31PCE3983.62891991-06-30PCE4008.42901991-07-31PCE4011.32911991-08-31PCE4027.32921991-09-30PCE4020.12931991-10-31PCE4048.22941991-11-30PCE4064.02951991-12-31PCE4128.22961992-01-31PCE4141.82971992-02-29PCE4157.62981992-03-31PCE4169.82991992-04-30PCE4195.53001992-05-31PCE4213.83011992-06-30PCE4241.83021992-07-31PCE4258.83031992-08-31PCE4292.53041992-09-30PCE4320.23051992-10-31PCE4334.33061992-11-30PCE4368.83071992-12-31PCE4371.53081993-01-31PCE4385.03091993-02-28PCE4381.53101993-03-31PCE4422.53111993-04-30PCE4450.93121993-05-31PCE4466.73131993-06-30PCE4493.83141993-07-31PCE4504.33151993-08-31PCE4534.03161993-09-30PCE4554.83171993-10-31PCE4575.93181993-11-30PCE4593.93191993-12-31PCE4608.53201994-01-31PCE4655.73211994-02-28PCE4667.53221994-03-31PCE4690.33231994-04-30PCE4688.33241994-05-31PCE4729.93251994-06-30PCE4745.43261994-07-31PCE4789.23271994-08-31PCE4801.23281994-09-30PCE4836.23291994-10-31PCE4846.53301994-11-30PCE4860.93311994-12-31PCE4869.33321995-01-31PCE4867.43331995-02-28PCE4900.53341995-03-31PCE4904.23351995-04-30PCE4946.13361995-05-31PCE4989.83371995-06-30PCE4982.73381995-07-31PCE5018.03391995-08-31PCE5032.53401995-09-30PCE5024.53411995-10-31PCE5065.83421995-11-30PCE5108.83431995-12-31PCE5098.03441996-01-31PCE5145.23451996-02-29PCE5185.13461996-03-31PCE5219.63471996-04-30PCE5234.83481996-05-31PCE5241.63491996-06-30PCE5263.63501996-07-31PCE5287.53511996-08-31PCE5308.23521996-09-30PCE5340.13531996-10-31PCE5365.53541996-11-30PCE5392.73551996-12-31PCE5419.93561997-01-31PCE5453.93571997-02-28PCE5472.63581997-03-31PCE5473.43591997-04-30PCE5474.43601997-05-31PCE5506.13611997-06-30PCE5565.03621997-07-31PCE5596.73631997-08-31PCE5607.63641997-09-30PCE5639.23651997-10-31PCE5666.13661997-11-30PCE5694.03671997-12-31PCE5698.73681998-01-31PCE5736.63691998-02-28PCE5764.83701998-03-31PCE5788.93711998-04-30PCE5842.93721998-05-31PCE5870.83731998-06-30PCE5887.43741998-07-31PCE5928.83751998-08-31PCE5956.33761998-09-30PCE5995.23771998-10-31PCE6018.53781998-11-30PCE6064.83791998-12-31PCE6067.43801999-01-31PCE6099.73811999-02-28PCE6138.03821999-03-31PCE6202.53831999-04-30PCE6245.13841999-05-31PCE6264.13851999-06-30PCE6297.33861999-07-31PCE6338.63871999-08-31PCE6375.73881999-09-30PCE6396.73891999-10-31PCE6433.23901999-11-30PCE6531.33911999-12-31PCE6538.03922000-01-31PCE6618.53932000-02-29PCE6685.33942000-03-31PCE6664.23952000-04-30PCE6688.03962000-05-31PCE6712.13972000-06-30PCE6745.83982000-07-31PCE6766.73992000-08-31PCE6839.34002000-09-30PCE6846.24012000-10-31PCE6860.24022000-11-30PCE6908.54032000-12-31PCE6938.24042001-01-31PCE6969.24052001-02-28PCE6960.14062001-03-31PCE6978.54072001-04-30PCE7029.14082001-05-31PCE7045.04092001-06-30PCE7064.14102001-07-31PCE7098.64112001-08-31PCE7012.74122001-09-30PCE7222.04132001-10-31PCE7177.24142001-11-30PCE7165.94152001-12-31PCE7196.54162002-01-31PCE7242.04172002-02-28PCE7252.34182002-03-31PCE7330.24192002-04-30PCE7296.24202002-05-31PCE7342.64212002-06-30PCE7396.44222002-07-31PCE7411.04232002-08-31PCE7382.34242002-09-30PCE7414.34252002-10-31PCE7443.64262002-11-30PCE7501.34272002-12-31PCE7522.14282003-01-31PCE7532.84292003-02-28PCE7589.54302003-03-31PCE7597.24312003-04-30PCE7619.24322003-05-31PCE7668.84332003-06-30PCE7723.34342003-07-31PCE7820.94352003-08-31PCE7803.74362003-09-30PCE7812.34372003-10-31PCE7868.54382003-11-30PCE7885.34392003-12-31PCE7977.74402004-01-31PCE8005.94412004-02-29PCE8070.54422004-03-31PCE8086.64432004-04-30PCE8196.54442004-05-31PCE8161.34452004-06-30PCE8235.34462004-07-31PCE8246.14472004-08-31PCE8313.74482004-09-30PCE8371.64492004-10-31PCE8410.84502004-11-30PCE8462.04512004-12-31PCE8469.44522005-01-31PCE8520.74532005-02-28PCE8569.04542005-03-31PCE8654.44552005-04-30PCE8644.64562005-05-31PCE8724.84572005-06-30PCE8833.94582005-07-31PCE8825.54592005-08-31PCE8882.54602005-09-30PCE8911.64612005-10-31PCE8916.44622005-11-30PCE8955.54632005-12-31PCE9034.44642006-01-31PCE9079.24652006-02-28PCE9123.84662006-03-31PCE9175.24672006-04-30PCE9238.64682006-05-31PCE9270.54692006-06-30PCE9338.94702006-07-31PCE9352.74712006-08-31PCE9348.54722006-09-30PCE9376.04732006-10-31PCE9410.84742006-11-30PCE9478.54752006-12-31PCE9540.34762007-01-31PCE9610.64772007-02-28PCE9653.04782007-03-31PCE9705.04791967-06-30Pop198712.04801967-07-31Pop198911.04811967-08-31Pop199113.04821967-09-30Pop199311.04831967-10-31Pop199498.04841967-11-30Pop199657.04851967-12-31Pop199808.04861968-01-31Pop199920.04871968-02-29Pop200056.04881968-03-31Pop200208.04891968-04-30Pop200361.04901968-05-31Pop200536.04911968-06-30Pop200706.04921968-07-31Pop200898.04931968-08-31Pop201095.04941968-09-30Pop201290.04951968-10-31Pop201466.04961968-11-30Pop201621.04971968-12-31Pop201760.04981969-01-31Pop201881.04991969-02-28Pop202023.05001969-03-31Pop202161.05011969-04-30Pop202331.05021969-05-31Pop202507.05031969-06-30Pop202677.05041969-07-31Pop202877.05051969-08-31Pop203090.05061969-09-30Pop203302.05071969-10-31Pop203500.05081969-11-30Pop203675.05091969-12-31Pop203849.05101970-01-31Pop204008.05111970-02-28Pop204156.05121970-03-31Pop204401.05131970-04-30Pop204607.05141970-05-31Pop204830.05151970-06-30Pop205052.05161970-07-31Pop205295.05171970-08-31Pop205540.05181970-09-30Pop205788.05191970-10-31Pop206024.05201970-11-30Pop206238.05211970-12-31Pop206466.05221971-01-31Pop206668.05231971-02-28Pop206855.05241971-03-31Pop207065.05251971-04-30Pop207260.05261971-05-31Pop207462.05271971-06-30Pop207661.05281971-07-31Pop207881.05291971-08-31Pop208114.05301971-09-30Pop208345.05311971-10-31Pop208555.05321971-11-30Pop208740.05331971-12-31Pop208917.05341972-01-31Pop209061.05351972-02-29Pop209212.05361972-03-31Pop209386.05371972-04-30Pop209545.05381972-05-31Pop209725.05391972-06-30Pop209896.05401972-07-31Pop210075.05411972-08-31Pop210278.05421972-09-30Pop210479.05431972-10-31Pop210656.05441972-11-30Pop210821.05451972-12-31Pop210985.05461973-01-31Pop211120.05471973-02-28Pop211254.05481973-03-31Pop211420.05491973-04-30Pop211577.05501973-05-31Pop211746.05511973-06-30Pop211909.05521973-07-31Pop212092.05531973-08-31Pop212289.05541973-09-30Pop212475.05551973-10-31Pop212634.05561973-11-30Pop212785.05571973-12-31Pop212932.05581974-01-31Pop213074.05591974-02-28Pop213211.05601974-03-31Pop213361.05611974-04-30Pop213513.05621974-05-31Pop213686.05631974-06-30Pop213854.05641974-07-31Pop214042.05651974-08-31Pop214246.05661974-09-30Pop214451.05671974-10-31Pop214625.05681974-11-30Pop214782.05691974-12-31Pop214931.05701975-01-31Pop215065.05711975-02-28Pop215198.05721975-03-31Pop215353.05731975-04-30Pop215523.05741975-05-31Pop215768.05751975-06-30Pop215973.05761975-07-31Pop216195.05771975-08-31Pop216393.05781975-09-30Pop216587.05791975-10-31Pop216771.05801975-11-30Pop216931.05811975-12-31Pop217095.05821976-01-31Pop217249.05831976-02-29Pop217381.05841976-03-31Pop217528.05851976-04-30Pop217685.05861976-05-31Pop217861.05871976-06-30Pop218035.05881976-07-31Pop218233.05891976-08-31Pop218440.05901976-09-30Pop218644.05911976-10-31Pop218834.05921976-11-30Pop219006.05931976-12-31Pop219179.05941977-01-31Pop219344.05951977-02-28Pop219504.05961977-03-31Pop219684.05971977-04-30Pop219859.05981977-05-31Pop220046.05991977-06-30Pop220239.06001977-07-31Pop220458.06011977-08-31Pop220688.06021977-09-30Pop220904.06031977-10-31Pop221109.06041977-11-30Pop221303.06051977-12-31Pop221477.06061978-01-31Pop221629.06071978-02-28Pop221792.06081978-03-31Pop221991.06091978-04-30Pop222176.06101978-05-31Pop222379.06111978-06-30Pop222585.06121978-07-31Pop222805.06131978-08-31Pop223053.06141978-09-30Pop223271.06151978-10-31Pop223477.06161978-11-30Pop223670.06171978-12-31Pop223865.06181979-01-31Pop224053.06191979-02-28Pop224235.06201979-03-31Pop224438.06211979-04-30Pop224632.06221979-05-31Pop224843.06231979-06-30Pop225055.06241979-07-31Pop225295.06251979-08-31Pop225547.06261979-09-30Pop225801.06271979-10-31Pop226027.06281979-11-30Pop226243.06291979-12-31Pop226451.06301980-01-31Pop226656.06311980-02-29Pop226849.06321980-03-31Pop227061.06331980-04-30Pop227251.06341980-05-31Pop227522.06351980-06-30Pop227726.06361980-07-31Pop227953.06371980-08-31Pop228186.06381980-09-30Pop228417.06391980-10-31Pop228612.06401980-11-30Pop228779.06411980-12-31Pop228937.06421981-01-31Pop229071.06431981-02-28Pop229224.06441981-03-31Pop229403.06451981-04-30Pop229575.06461981-05-31Pop229761.06471981-06-30Pop229966.06481981-07-31Pop230187.06491981-08-31Pop230412.06501981-09-30Pop230641.06511981-10-31Pop230822.06521981-11-30Pop230989.06531981-12-31Pop231157.06541982-01-31Pop231313.06551982-02-28Pop231470.06561982-03-31Pop231645.06571982-04-30Pop231809.06581982-05-31Pop231992.06591982-06-30Pop232188.06601982-07-31Pop232392.06611982-08-31Pop232599.06621982-09-30Pop232816.06631982-10-31Pop232993.06641982-11-30Pop233160.06651982-12-31Pop233322.06661983-01-31Pop233473.06671983-02-28Pop233613.06681983-03-31Pop233781.06691983-04-30Pop233922.06701983-05-31Pop234118.06711983-06-30Pop234307.06721983-07-31Pop234501.06731983-08-31Pop234701.06741983-09-30Pop234907.06751983-10-31Pop235078.06761983-11-30Pop235235.06771983-12-31Pop235385.06781984-01-31Pop235527.06791984-02-29Pop235675.06801984-03-31Pop235839.06811984-04-30Pop235993.06821984-05-31Pop236160.06831984-06-30Pop236348.06841984-07-31Pop236549.06851984-08-31Pop236760.06861984-09-30Pop236976.06871984-10-31Pop237159.06881984-11-30Pop237316.06891984-12-31Pop237468.06901985-01-31Pop237602.06911985-02-28Pop237732.06921985-03-31Pop237900.06931985-04-30Pop238074.06941985-05-31Pop238270.06951985-06-30Pop238466.06961985-07-31Pop238679.06971985-08-31Pop238898.06981985-09-30Pop239113.06991985-10-31Pop239307.07001985-11-30Pop239477.07011985-12-31Pop239638.07021986-01-31Pop239788.07031986-02-28Pop239928.07041986-03-31Pop240094.07051986-04-30Pop240271.07061986-05-31Pop240459.07071986-06-30Pop240651.07081986-07-31Pop240854.07091986-08-31Pop241068.07101986-09-30Pop241274.07111986-10-31Pop241467.07121986-11-30Pop241620.07131986-12-31Pop241784.07141987-01-31Pop241930.07151987-02-28Pop242079.07161987-03-31Pop242252.07171987-04-30Pop242423.07181987-05-31Pop242608.07191987-06-30Pop242804.07201987-07-31Pop243012.07211987-08-31Pop243223.07221987-09-30Pop243446.07231987-10-31Pop243639.07241987-11-30Pop243809.07251987-12-31Pop243981.07261988-01-31Pop244131.07271988-02-29Pop244279.07281988-03-31Pop244445.07291988-04-30Pop244610.07301988-05-31Pop244806.07311988-06-30Pop245021.07321988-07-31Pop245240.07331988-08-31Pop245464.07341988-09-30Pop245693.07351988-10-31Pop245884.07361988-11-30Pop246056.07371988-12-31Pop246224.07381989-01-31Pop246378.07391989-02-28Pop246530.07401989-03-31Pop246721.07411989-04-30Pop246906.07421989-05-31Pop247114.07431989-06-30Pop247342.07441989-07-31Pop247573.07451989-08-31Pop247816.07461989-09-30Pop248067.07471989-10-31Pop248281.07481989-11-30Pop248479.07491989-12-31Pop248659.07501990-01-31Pop248827.07511990-02-28Pop249012.07521990-03-31Pop249306.07531990-04-30Pop249565.07541990-05-31Pop249849.07551990-06-30Pop250132.07561990-07-31Pop250439.07571990-08-31Pop250751.07581990-09-30Pop251057.07591990-10-31Pop251346.07601990-11-30Pop251626.07611990-12-31Pop251889.07621991-01-31Pop252135.07631991-02-28Pop252372.07641991-03-31Pop252643.07651991-04-30Pop252913.07661991-05-31Pop253207.07671991-06-30Pop253493.07681991-07-31Pop253807.07691991-08-31Pop254126.07701991-09-30Pop254435.07711991-10-31Pop254718.07721991-11-30Pop254964.07731991-12-31Pop255214.07741992-01-31Pop255448.07751992-02-29Pop255703.07761992-03-31Pop255992.07771992-04-30Pop256285.07781992-05-31Pop256589.07791992-06-30Pop256894.07801992-07-31Pop257232.07811992-08-31Pop257548.07821992-09-30Pop257861.07831992-10-31Pop258147.07841992-11-30Pop258413.07851992-12-31Pop258679.07861993-01-31Pop258919.07871993-02-28Pop259152.07881993-03-31Pop259414.07891993-04-30Pop259680.07901993-05-31Pop259963.07911993-06-30Pop260255.07921993-07-31Pop260566.07931993-08-31Pop260867.07941993-09-30Pop261163.07951993-10-31Pop261425.07961993-11-30Pop261674.07971993-12-31Pop261919.07981994-01-31Pop262123.07991994-02-28Pop262352.08001994-03-31Pop262631.08011994-04-30Pop262877.08021994-05-31Pop263152.08031994-06-30Pop263436.08041994-07-31Pop263724.08051994-08-31Pop264017.08061994-09-30Pop264301.08071994-10-31Pop264559.08081994-11-30Pop264804.08091994-12-31Pop265044.08101995-01-31Pop265270.08111995-02-28Pop265495.08121995-03-31Pop265755.08131995-04-30Pop265998.08141995-05-31Pop266270.08151995-06-30Pop266557.08161995-07-31Pop266843.08171995-08-31Pop267152.08181995-09-30Pop267456.08191995-10-31Pop267715.08201995-11-30Pop267943.08211995-12-31Pop268151.08221996-01-31Pop268364.08231996-02-29Pop268595.08241996-03-31Pop268853.08251996-04-30Pop269108.08261996-05-31Pop269386.08271996-06-30Pop269667.08281996-07-31Pop269976.08291996-08-31Pop270284.08301996-09-30Pop270581.08311996-10-31Pop270878.08321996-11-30Pop271125.08331996-12-31Pop271360.08341997-01-31Pop271585.08351997-02-28Pop271821.08361997-03-31Pop272083.08371997-04-30Pop272342.08381997-05-31Pop272622.08391997-06-30Pop272912.08401997-07-31Pop273237.08411997-08-31Pop273553.08421997-09-30Pop273852.08431997-10-31Pop274126.08441997-11-30Pop274372.08451997-12-31Pop274626.08461998-01-31Pop274838.08471998-02-28Pop275047.08481998-03-31Pop275304.08491998-04-30Pop275564.08501998-05-31Pop275836.08511998-06-30Pop276115.08521998-07-31Pop276418.08531998-08-31Pop276714.08541998-09-30Pop277003.08551998-10-31Pop277277.08561998-11-30Pop277526.08571998-12-31Pop277790.08581999-01-31Pop277992.08591999-02-28Pop278198.08601999-03-31Pop278451.08611999-04-30Pop278717.08621999-05-31Pop279001.08631999-06-30Pop279295.08641999-07-31Pop279602.08651999-08-31Pop279903.08661999-09-30Pop280203.08671999-10-31Pop280471.08681999-11-30Pop280716.08691999-12-31Pop280976.08702000-01-31Pop281190.08712000-02-29Pop281409.08722000-03-31Pop281653.08732000-04-30Pop281891.08742000-05-31Pop282156.08752000-06-30Pop282430.08762000-07-31Pop282706.08772000-08-31Pop282994.08782000-09-30Pop283271.08792000-10-31Pop283531.08802000-11-30Pop283782.08812000-12-31Pop284015.08822001-01-31Pop284240.08832001-02-28Pop284462.08842001-03-31Pop284701.08852001-04-30Pop284938.08862001-05-31Pop285198.08872001-06-30Pop285454.08882001-07-31Pop285730.08892001-08-31Pop286017.08902001-09-30Pop286287.08912001-10-31Pop286545.08922001-11-30Pop286788.08932001-12-31Pop287021.08942002-01-31Pop287242.08952002-02-28Pop287453.08962002-03-31Pop287675.08972002-04-30Pop287916.08982002-05-31Pop288171.08992002-06-30Pop288427.09002002-07-31Pop288694.09012002-08-31Pop288965.09022002-09-30Pop289229.09032002-10-31Pop289477.09042002-11-30Pop289696.09052002-12-31Pop289913.09062003-01-31Pop290122.09072003-02-28Pop290331.09082003-03-31Pop290557.09092003-04-30Pop290791.09102003-05-31Pop291041.09112003-06-30Pop291289.09122003-07-31Pop291552.09132003-08-31Pop291811.09142003-09-30Pop292074.09152003-10-31Pop292318.09162003-11-30Pop292529.09172003-12-31Pop292723.09182004-01-31Pop292909.09192004-02-29Pop293112.09202004-03-31Pop293340.09212004-04-30Pop293569.09222004-05-31Pop293805.09232004-06-30Pop294056.09242004-07-31Pop294323.09252004-08-31Pop294587.09262004-09-30Pop294857.09272004-10-31Pop295105.09282004-11-30Pop295344.09292004-12-31Pop295576.09302005-01-31Pop295767.09312005-02-28Pop295975.09322005-03-31Pop296209.09332005-04-30Pop296443.09342005-05-31Pop296684.09352005-06-30Pop296940.09362005-07-31Pop297207.09372005-08-31Pop297471.09382005-09-30Pop297740.09392005-10-31Pop297988.09402005-11-30Pop298227.09412005-12-31Pop298458.09422006-01-31Pop298645.09432006-02-28Pop298849.09442006-03-31Pop299079.09452006-04-30Pop299310.09462006-05-31Pop299548.09472006-06-30Pop299801.09482006-07-31Pop300065.09492006-08-31Pop300326.09502006-09-30Pop300592.09512006-10-31Pop300836.09522006-11-30Pop301070.09532006-12-31Pop301296.09542007-01-31Pop301481.09552007-02-28Pop301684.09562007-03-31Pop301913.09571967-06-30PSavert9.89581967-07-31PSavert9.89591967-08-31PSavert9.09601967-09-30PSavert9.89611967-10-31PSavert9.79621967-11-30PSavert9.49631967-12-31PSavert9.09641968-01-31PSavert9.59651968-02-29PSavert8.99661968-03-31PSavert9.69671968-04-30PSavert9.39681968-05-31PSavert8.99691968-06-30PSavert7.89701968-07-31PSavert7.69711968-08-31PSavert7.69721968-09-30PSavert7.89731968-10-31PSavert7.69741968-11-30PSavert8.19751968-12-31PSavert7.19761969-01-31PSavert6.59771969-02-28PSavert7.09781969-03-31PSavert6.69791969-04-30PSavert7.09801969-05-31PSavert7.99811969-06-30PSavert8.79821969-07-31PSavert8.59831969-08-31PSavert8.59841969-09-30PSavert8.39851969-10-31PSavert8.59861969-11-30PSavert8.69871969-12-31PSavert8.39881970-01-31PSavert8.19891970-02-28PSavert8.89901970-03-31PSavert10.59911970-04-30PSavert9.49921970-05-31PSavert8.79931970-06-30PSavert10.09941970-07-31PSavert10.09951970-08-31PSavert9.89961970-09-30PSavert9.89971970-10-31PSavert10.19981970-11-30PSavert9.79991970-12-31PSavert10.010001971-01-31PSavert9.910011971-02-28PSavert10.210021971-03-31PSavert9.910031971-04-30PSavert10.210041971-05-31PSavert11.410051971-06-30PSavert10.410061971-07-31PSavert10.310071971-08-31PSavert9.710081971-09-30PSavert9.610091971-10-31PSavert9.510101971-11-30PSavert9.510111971-12-31PSavert9.110121972-01-31PSavert9.410131972-02-29PSavert8.210141972-03-31PSavert8.310151972-04-30PSavert8.510161972-05-31PSavert7.210171972-06-30PSavert8.210181972-07-31PSavert8.610191972-08-31PSavert8.810201972-09-30PSavert9.510211972-10-31PSavert10.210221972-11-30PSavert10.310231972-12-31PSavert9.110241973-01-31PSavert9.510251973-02-28PSavert9.710261973-03-31PSavert10.010271973-04-30PSavert10.210281973-05-31PSavert10.710291973-06-30PSavert10.210301973-07-31PSavert11.010311973-08-31PSavert10.210321973-09-30PSavert11.510331973-10-31PSavert11.610341973-11-30PSavert12.010351973-12-31PSavert11.610361974-01-31PSavert11.410371974-02-28PSavert10.610381974-03-31PSavert10.210391974-04-30PSavert10.010401974-05-31PSavert10.210411974-06-30PSavert10.610421974-07-31PSavert9.510431974-08-31PSavert10.210441974-09-30PSavert10.710451974-10-31PSavert11.110461974-11-30PSavert11.110471974-12-31PSavert10.310481975-01-31PSavert9.510491975-02-28PSavert9.710501975-03-31PSavert11.310511975-04-30PSavert14.610521975-05-31PSavert11.410531975-06-30PSavert9.710541975-07-31PSavert10.110551975-08-31PSavert10.210561975-09-30PSavert10.710571975-10-31PSavert10.010581975-11-30PSavert9.310591975-12-31PSavert9.210601976-01-31PSavert9.910611976-02-29PSavert9.810621976-03-31PSavert9.410631976-04-30PSavert10.110641976-05-31PSavert9.210651976-06-30PSavert9.510661976-07-31PSavert9.610671976-08-31PSavert9.310681976-09-30PSavert9.010691976-10-31PSavert9.410701976-11-30PSavert8.410711976-12-31PSavert8.510721977-01-31PSavert7.110731977-02-28PSavert8.410741977-03-31PSavert8.410751977-04-30PSavert8.310761977-05-31PSavert8.710771977-06-30PSavert8.610781977-07-31PSavert9.010791977-08-31PSavert9.310801977-09-30PSavert9.410811977-10-31PSavert9.410821977-11-30PSavert9.410831977-12-31PSavert9.910841978-01-31PSavert9.110851978-02-28PSavert9.110861978-03-31PSavert8.910871978-04-30PSavert8.510881978-05-31PSavert8.110891978-06-30PSavert9.110901978-07-31PSavert8.510911978-08-31PSavert8.810921978-09-30PSavert8.910931978-10-31PSavert8.810941978-11-30PSavert8.710951978-12-31PSavert9.410961979-01-31PSavert9.310971979-02-28PSavert9.510981979-03-31PSavert9.210991979-04-30PSavert8.811001979-05-31PSavert8.411011979-06-30PSavert9.111021979-07-31PSavert8.311031979-08-31PSavert7.911041979-09-30PSavert8.711051979-10-31PSavert8.811061979-11-30PSavert9.311071979-12-31PSavert9.311081980-01-31PSavert9.611091980-02-29PSavert9.711101980-03-31PSavert10.111111980-04-30PSavert10.011121980-05-31PSavert9.711131980-06-30PSavert9.811141980-07-31PSavert9.811151980-08-31PSavert10.311161980-09-30PSavert10.411171980-10-31PSavert10.911181980-11-30PSavert10.711191980-12-31PSavert9.911201981-01-31PSavert9.811211981-02-28PSavert9.711221981-03-31PSavert9.811231981-04-30PSavert10.011241981-05-31PSavert9.911251981-06-30PSavert11.411261981-07-31PSavert11.211271981-08-31PSavert11.711281981-09-30PSavert12.511291981-10-31PSavert12.511301981-11-30PSavert11.711311981-12-31PSavert11.911321982-01-31PSavert11.311331982-02-28PSavert11.511341982-03-31PSavert12.211351982-04-30PSavert11.611361982-05-31PSavert11.511371982-06-30PSavert11.911381982-07-31PSavert11.711391982-08-31PSavert10.811401982-09-30PSavert10.311411982-10-31PSavert9.911421982-11-30PSavert9.711431982-12-31PSavert9.911441983-01-31PSavert10.011451983-02-28PSavert9.511461983-03-31PSavert9.111471983-04-30PSavert8.911481983-05-31PSavert8.111491983-06-30PSavert8.611501983-07-31PSavert8.011511983-08-31PSavert8.511521983-09-30PSavert8.611531983-10-31PSavert9.211541983-11-30PSavert9.111551983-12-31PSavert9.411561984-01-31PSavert10.811571984-02-29PSavert10.611581984-03-31PSavert10.811591984-04-30PSavert10.511601984-05-31PSavert10.611611984-06-30PSavert11.411621984-07-31PSavert11.311631984-08-31PSavert11.211641984-09-30PSavert11.411651984-10-31PSavert10.611661984-11-30PSavert11.011671984-12-31PSavert10.311681985-01-31PSavert9.111691985-02-28PSavert8.711701985-03-31PSavert10.111711985-04-30PSavert11.111721985-05-31PSavert9.511731985-06-30PSavert8.911741985-07-31PSavert8.011751985-08-31PSavert6.811761985-09-30PSavert8.911771985-10-31PSavert8.511781985-11-30PSavert8.311791985-12-31PSavert8.211801986-01-31PSavert8.911811986-02-28PSavert9.511821986-03-31PSavert9.111831986-04-30PSavert8.711841986-05-31PSavert8.911851986-06-30PSavert8.611861986-07-31PSavert8.311871986-08-31PSavert6.411881986-09-30PSavert7.511891986-10-31PSavert8.111901986-11-30PSavert5.911911986-12-31PSavert8.811921987-01-31PSavert7.611931987-02-28PSavert7.711941987-03-31PSavert3.511951987-04-30PSavert7.211961987-05-31PSavert6.711971987-06-30PSavert6.511981987-07-31PSavert6.211991987-08-31PSavert6.712001987-09-30PSavert7.412011987-10-31PSavert7.612021987-11-30PSavert7.712031987-12-31PSavert7.012041988-01-31PSavert7.512051988-02-29PSavert7.212061988-03-31PSavert7.612071988-04-30PSavert7.212081988-05-31PSavert7.312091988-06-30PSavert7.512101988-07-31PSavert7.212111988-08-31PSavert7.512121988-09-30PSavert7.212131988-10-31PSavert7.012141988-11-30PSavert7.212151988-12-31PSavert7.612161989-01-31PSavert7.912171989-02-28PSavert8.312181989-03-31PSavert7.312191989-04-30PSavert7.012201989-05-31PSavert7.112211989-06-30PSavert7.112221989-07-31PSavert6.412231989-08-31PSavert6.612241989-09-30PSavert6.812251989-10-31PSavert7.212261989-11-30PSavert6.512271989-12-31PSavert6.612281990-01-31PSavert7.312291990-02-28PSavert7.012301990-03-31PSavert7.312311990-04-30PSavert7.212321990-05-31PSavert7.112331990-06-30PSavert7.212341990-07-31PSavert6.712351990-08-31PSavert6.712361990-09-30PSavert6.612371990-10-31PSavert6.712381990-11-30PSavert7.312391990-12-31PSavert7.912401991-01-31PSavert7.512411991-02-28PSavert6.612421991-03-31PSavert7.112431991-04-30PSavert6.912441991-05-31PSavert7.412451991-06-30PSavert6.812461991-07-31PSavert7.012471991-08-31PSavert7.212481991-09-30PSavert7.512491991-10-31PSavert7.312501991-11-30PSavert7.912511991-12-31PSavert7.412521992-01-31PSavert7.912531992-02-29PSavert7.912541992-03-31PSavert8.012551992-04-30PSavert7.912561992-05-31PSavert7.812571992-06-30PSavert7.512581992-07-31PSavert7.612591992-08-31PSavert6.912601992-09-30PSavert7.112611992-10-31PSavert7.012621992-11-30PSavert9.412631992-12-31PSavert5.812641993-01-31PSavert5.612651993-02-28PSavert5.612661993-03-31PSavert6.412671993-04-30PSavert6.312681993-05-31PSavert5.912691993-06-30PSavert5.412701993-07-31PSavert5.612711993-08-31PSavert5.012721993-09-30PSavert5.012731993-10-31PSavert5.012741993-11-30PSavert7.612751993-12-31PSavert4.012761994-01-31PSavert3.912771994-02-28PSavert4.312781994-03-31PSavert4.212791994-04-30PSavert5.812801994-05-31PSavert5.112811994-06-30PSavert5.112821994-07-31PSavert4.712831994-08-31PSavert5.012841994-09-30PSavert5.312851994-10-31PSavert5.212861994-11-30PSavert5.312871994-12-31PSavert5.612881995-01-31PSavert5.912891995-02-28PSavert5.512901995-03-31PSavert4.812911995-04-30PSavert4.912921995-05-31PSavert4.412931995-06-30PSavert4.612941995-07-31PSavert4.112951995-08-31PSavert4.112961995-09-30PSavert4.412971995-10-31PSavert3.912981995-11-30PSavert3.612991995-12-31PSavert4.213001996-01-31PSavert4.313011996-02-29PSavert4.213021996-03-31PSavert3.113031996-04-30PSavert4.113041996-05-31PSavert4.513051996-06-30PSavert4.113061996-07-31PSavert4.113071996-08-31PSavert4.113081996-09-30PSavert3.813091996-10-31PSavert3.813101996-11-30PSavert3.813111996-12-31PSavert3.713121997-01-31PSavert3.513131997-02-28PSavert3.713141997-03-31PSavert3.813151997-04-30PSavert4.013161997-05-31PSavert3.913171997-06-30PSavert3.313181997-07-31PSavert3.313191997-08-31PSavert3.613201997-09-30PSavert3.513211997-10-31PSavert3.713221997-11-30PSavert3.813231997-12-31PSavert4.613241998-01-31PSavert4.613251998-02-28PSavert4.713261998-03-31PSavert4.713271998-04-30PSavert4.413281998-05-31PSavert4.413291998-06-30PSavert4.513301998-07-31PSavert4.313311998-08-31PSavert4.213321998-09-30PSavert3.913331998-10-31PSavert4.013341998-11-30PSavert3.513351998-12-31PSavert4.013361999-01-31PSavert3.713371999-02-28PSavert3.313381999-03-31PSavert2.513391999-04-30PSavert2.113401999-05-31PSavert2.113411999-06-30PSavert1.913421999-07-31PSavert1.813431999-08-31PSavert1.413441999-09-30PSavert2.013451999-10-31PSavert2.113461999-11-30PSavert1.613471999-12-31PSavert2.913482000-01-31PSavert2.413492000-02-29PSavert2.013502000-03-31PSavert2.413512000-04-30PSavert2.413522000-05-31PSavert2.513532000-06-30PSavert2.913542000-07-31PSavert2.813552000-08-31PSavert2.213562000-09-30PSavert2.313572000-10-31PSavert2.113582000-11-30PSavert1.513592000-12-31PSavert1.913602001-01-31PSavert1.713612001-02-28PSavert2.013622001-03-31PSavert1.613632001-04-30PSavert1.013642001-05-31PSavert1.113652001-06-30PSavert2.413662001-07-31PSavert3.713672001-08-31PSavert4.213682001-09-30PSavert-0.213692001-10-31PSavert0.713702001-11-30PSavert1.113712001-12-31PSavert2.913722002-01-31PSavert2.813732002-02-28PSavert3.013742002-03-31PSavert2.613752002-04-30PSavert3.113762002-05-31PSavert2.813772002-06-30PSavert1.913782002-07-31PSavert1.713792002-08-31PSavert2.213802002-09-30PSavert2.013812002-10-31PSavert1.813822002-11-30PSavert1.513832002-12-31PSavert1.813842003-01-31PSavert2.013852003-02-28PSavert1.713862003-03-31PSavert2.013872003-04-30PSavert2.313882003-05-31PSavert2.113892003-06-30PSavert2.813902003-07-31PSavert2.513912003-08-31PSavert1.713922003-09-30PSavert2.113932003-10-31PSavert2.213942003-11-30PSavert2.413952003-12-31PSavert2.113962004-01-31PSavert2.313972004-02-29PSavert2.013982004-03-31PSavert2.213992004-04-30PSavert1.514002004-05-31PSavert2.114012004-06-30PSavert1.714022004-07-31PSavert2.014032004-08-31PSavert1.214042004-09-30PSavert1.414052004-10-31PSavert1.214062004-11-30PSavert4.314072004-12-31PSavert0.914082005-01-31PSavert0.614092005-02-28PSavert0.214102005-03-31PSavert-0.414112005-04-30PSavert-0.114122005-05-31PSavert-0.514132005-06-30PSavert-0.914142005-07-31PSavert-3.014152005-08-31PSavert-0.514162005-09-30PSavert-0.314172005-10-31PSavert-0.314182005-11-30PSavert-0.314192005-12-31PSavert-0.314202006-01-31PSavert-0.314212006-02-28PSavert-0.414222006-03-31PSavert-1.014232006-04-30PSavert-1.614242006-05-31PSavert-1.514252006-06-30PSavert-1.714262006-07-31PSavert-1.514272006-08-31PSavert-1.014282006-09-30PSavert-0.814292006-10-31PSavert-0.914302006-11-30PSavert-1.114312006-12-31PSavert-0.914322007-01-31PSavert-1.014332007-02-28PSavert-0.714342007-03-31PSavert-1.314351967-06-30UEmpMed4.514361967-07-31UEmpMed4.714371967-08-31UEmpMed4.614381967-09-30UEmpMed4.914391967-10-31UEmpMed4.714401967-11-30UEmpMed4.814411967-12-31UEmpMed5.114421968-01-31UEmpMed4.514431968-02-29UEmpMed4.114441968-03-31UEmpMed4.614451968-04-30UEmpMed4.414461968-05-31UEmpMed4.414471968-06-30UEmpMed4.514481968-07-31UEmpMed4.214491968-08-31UEmpMed4.614501968-09-30UEmpMed4.814511968-10-31UEmpMed4.414521968-11-30UEmpMed4.414531968-12-31UEmpMed4.414541969-01-31UEmpMed4.914551969-02-28UEmpMed4.014561969-03-31UEmpMed4.014571969-04-30UEmpMed4.214581969-05-31UEmpMed4.414591969-06-30UEmpMed4.414601969-07-31UEmpMed4.414611969-08-31UEmpMed4.714621969-09-30UEmpMed4.514631969-10-31UEmpMed4.814641969-11-30UEmpMed4.614651969-12-31UEmpMed4.614661970-01-31UEmpMed4.514671970-02-28UEmpMed4.614681970-03-31UEmpMed4.114691970-04-30UEmpMed4.714701970-05-31UEmpMed4.914711970-06-30UEmpMed5.114721970-07-31UEmpMed5.414731970-08-31UEmpMed5.214741970-09-30UEmpMed5.214751970-10-31UEmpMed5.614761970-11-30UEmpMed5.914771970-12-31UEmpMed6.214781971-01-31UEmpMed6.314791971-02-28UEmpMed6.414801971-03-31UEmpMed6.514811971-04-30UEmpMed6.714821971-05-31UEmpMed5.714831971-06-30UEmpMed6.214841971-07-31UEmpMed6.414851971-08-31UEmpMed5.814861971-09-30UEmpMed6.514871971-10-31UEmpMed6.414881971-11-30UEmpMed6.214891971-12-31UEmpMed6.214901972-01-31UEmpMed6.614911972-02-29UEmpMed6.614921972-03-31UEmpMed6.714931972-04-30UEmpMed6.614941972-05-31UEmpMed5.414951972-06-30UEmpMed6.114961972-07-31UEmpMed6.014971972-08-31UEmpMed5.614981972-09-30UEmpMed5.714991972-10-31UEmpMed5.715001972-11-30UEmpMed6.115011972-12-31UEmpMed5.715021973-01-31UEmpMed5.215031973-02-28UEmpMed5.515041973-03-31UEmpMed5.015051973-04-30UEmpMed4.915061973-05-31UEmpMed5.015071973-06-30UEmpMed5.215081973-07-31UEmpMed4.915091973-08-31UEmpMed5.415101973-09-30UEmpMed5.515111973-10-31UEmpMed5.115121973-11-30UEmpMed4.715131973-12-31UEmpMed5.015141974-01-31UEmpMed5.115151974-02-28UEmpMed4.815161974-03-31UEmpMed5.015171974-04-30UEmpMed4.615181974-05-31UEmpMed5.315191974-06-30UEmpMed5.715201974-07-31UEmpMed5.015211974-08-31UEmpMed5.315221974-09-30UEmpMed5.515231974-10-31UEmpMed5.215241974-11-30UEmpMed5.715251974-12-31UEmpMed6.315261975-01-31UEmpMed7.115271975-02-28UEmpMed7.215281975-03-31UEmpMed8.715291975-04-30UEmpMed9.415301975-05-31UEmpMed8.815311975-06-30UEmpMed8.615321975-07-31UEmpMed9.215331975-08-31UEmpMed9.215341975-09-30UEmpMed8.615351975-10-31UEmpMed9.515361975-11-30UEmpMed9.015371975-12-31UEmpMed9.015381976-01-31UEmpMed8.215391976-02-29UEmpMed8.715401976-03-31UEmpMed8.215411976-04-30UEmpMed8.315421976-05-31UEmpMed7.815431976-06-30UEmpMed7.715441976-07-31UEmpMed7.915451976-08-31UEmpMed7.815461976-09-30UEmpMed7.715471976-10-31UEmpMed8.415481976-11-30UEmpMed8.015491976-12-31UEmpMed7.515501977-01-31UEmpMed7.215511977-02-28UEmpMed7.215521977-03-31UEmpMed7.315531977-04-30UEmpMed7.915541977-05-31UEmpMed6.215551977-06-30UEmpMed7.115561977-07-31UEmpMed7.015571977-08-31UEmpMed6.715581977-09-30UEmpMed6.915591977-10-31UEmpMed7.015601977-11-30UEmpMed6.815611977-12-31UEmpMed6.515621978-01-31UEmpMed6.715631978-02-28UEmpMed6.215641978-03-31UEmpMed6.115651978-04-30UEmpMed5.715661978-05-31UEmpMed6.015671978-06-30UEmpMed5.815681978-07-31UEmpMed5.815691978-08-31UEmpMed5.615701978-09-30UEmpMed5.915711978-10-31UEmpMed5.515721978-11-30UEmpMed5.615731978-12-31UEmpMed5.915741979-01-31UEmpMed5.915751979-02-28UEmpMed5.915761979-03-31UEmpMed5.415771979-04-30UEmpMed5.615781979-05-31UEmpMed5.615791979-06-30UEmpMed5.915801979-07-31UEmpMed4.815811979-08-31UEmpMed5.515821979-09-30UEmpMed5.515831979-10-31UEmpMed5.315841979-11-30UEmpMed5.715851979-12-31UEmpMed5.315861980-01-31UEmpMed5.815871980-02-29UEmpMed6.015881980-03-31UEmpMed5.815891980-04-30UEmpMed5.715901980-05-31UEmpMed6.415911980-06-30UEmpMed7.015921980-07-31UEmpMed7.515931980-08-31UEmpMed7.715941980-09-30UEmpMed7.515951980-10-31UEmpMed7.715961980-11-30UEmpMed7.515971980-12-31UEmpMed7.415981981-01-31UEmpMed7.115991981-02-28UEmpMed7.116001981-03-31UEmpMed7.416011981-04-30UEmpMed6.916021981-05-31UEmpMed6.616031981-06-30UEmpMed7.116041981-07-31UEmpMed7.216051981-08-31UEmpMed6.816061981-09-30UEmpMed6.816071981-10-31UEmpMed6.916081981-11-30UEmpMed6.916091981-12-31UEmpMed7.116101982-01-31UEmpMed7.516111982-02-28UEmpMed7.716121982-03-31UEmpMed8.116131982-04-30UEmpMed8.516141982-05-31UEmpMed9.516151982-06-30UEmpMed8.516161982-07-31UEmpMed8.716171982-08-31UEmpMed9.516181982-09-30UEmpMed9.716191982-10-31UEmpMed10.016201982-11-30UEmpMed10.216211982-12-31UEmpMed11.116221983-01-31UEmpMed9.816231983-02-28UEmpMed10.416241983-03-31UEmpMed10.916251983-04-30UEmpMed12.316261983-05-31UEmpMed11.316271983-06-30UEmpMed10.116281983-07-31UEmpMed9.316291983-08-31UEmpMed9.316301983-09-30UEmpMed9.416311983-10-31UEmpMed9.316321983-11-30UEmpMed8.716331983-12-31UEmpMed9.116341984-01-31UEmpMed8.316351984-02-29UEmpMed8.316361984-03-31UEmpMed8.216371984-04-30UEmpMed9.116381984-05-31UEmpMed7.516391984-06-30UEmpMed7.516401984-07-31UEmpMed7.316411984-08-31UEmpMed7.616421984-09-30UEmpMed7.216431984-10-31UEmpMed7.216441984-11-30UEmpMed7.316451984-12-31UEmpMed6.816461985-01-31UEmpMed7.116471985-02-28UEmpMed7.116481985-03-31UEmpMed6.916491985-04-30UEmpMed6.916501985-05-31UEmpMed6.616511985-06-30UEmpMed6.916521985-07-31UEmpMed7.116531985-08-31UEmpMed6.916541985-09-30UEmpMed7.116551985-10-31UEmpMed7.016561985-11-30UEmpMed6.816571985-12-31UEmpMed6.716581986-01-31UEmpMed6.916591986-02-28UEmpMed6.816601986-03-31UEmpMed6.716611986-04-30UEmpMed6.816621986-05-31UEmpMed7.016631986-06-30UEmpMed6.916641986-07-31UEmpMed7.116651986-08-31UEmpMed7.416661986-09-30UEmpMed7.016671986-10-31UEmpMed7.116681986-11-30UEmpMed7.116691986-12-31UEmpMed6.916701987-01-31UEmpMed6.616711987-02-28UEmpMed6.616721987-03-31UEmpMed7.116731987-04-30UEmpMed6.616741987-05-31UEmpMed6.516751987-06-30UEmpMed6.516761987-07-31UEmpMed6.416771987-08-31UEmpMed6.016781987-09-30UEmpMed6.316791987-10-31UEmpMed6.216801987-11-30UEmpMed6.016811987-12-31UEmpMed6.216821988-01-31UEmpMed6.316831988-02-29UEmpMed6.416841988-03-31UEmpMed5.916851988-04-30UEmpMed5.916861988-05-31UEmpMed5.816871988-06-30UEmpMed6.116881988-07-31UEmpMed5.916891988-08-31UEmpMed5.716901988-09-30UEmpMed5.616911988-10-31UEmpMed5.716921988-11-30UEmpMed5.916931988-12-31UEmpMed5.616941989-01-31UEmpMed5.416951989-02-28UEmpMed5.416961989-03-31UEmpMed5.416971989-04-30UEmpMed5.316981989-05-31UEmpMed5.416991989-06-30UEmpMed5.617001989-07-31UEmpMed5.017011989-08-31UEmpMed4.917021989-09-30UEmpMed4.917031989-10-31UEmpMed4.817041989-11-30UEmpMed4.917051989-12-31UEmpMed5.117061990-01-31UEmpMed5.317071990-02-28UEmpMed5.117081990-03-31UEmpMed4.817091990-04-30UEmpMed5.217101990-05-31UEmpMed5.217111990-06-30UEmpMed5.417121990-07-31UEmpMed5.417131990-08-31UEmpMed5.617141990-09-30UEmpMed5.817151990-10-31UEmpMed5.717161990-11-30UEmpMed5.917171990-12-31UEmpMed6.017181991-01-31UEmpMed6.217191991-02-28UEmpMed6.717201991-03-31UEmpMed6.617211991-04-30UEmpMed6.417221991-05-31UEmpMed6.917231991-06-30UEmpMed7.017241991-07-31UEmpMed7.317251991-08-31UEmpMed6.817261991-09-30UEmpMed7.217271991-10-31UEmpMed7.517281991-11-30UEmpMed7.817291991-12-31UEmpMed8.117301992-01-31UEmpMed8.217311992-02-29UEmpMed8.317321992-03-31UEmpMed8.517331992-04-30UEmpMed8.817341992-05-31UEmpMed8.717351992-06-30UEmpMed8.617361992-07-31UEmpMed8.817371992-08-31UEmpMed8.617381992-09-30UEmpMed9.017391992-10-31UEmpMed9.017401992-11-30UEmpMed9.317411992-12-31UEmpMed8.617421993-01-31UEmpMed8.517431993-02-28UEmpMed8.517441993-03-31UEmpMed8.417451993-04-30UEmpMed8.117461993-05-31UEmpMed8.317471993-06-30UEmpMed8.217481993-07-31UEmpMed8.217491993-08-31UEmpMed8.317501993-09-30UEmpMed8.017511993-10-31UEmpMed8.317521993-11-30UEmpMed8.317531993-12-31UEmpMed8.617541994-01-31UEmpMed9.217551994-02-28UEmpMed9.317561994-03-31UEmpMed9.117571994-04-30UEmpMed9.217581994-05-31UEmpMed9.317591994-06-30UEmpMed9.017601994-07-31UEmpMed8.917611994-08-31UEmpMed9.217621994-09-30UEmpMed10.017631994-10-31UEmpMed9.017641994-11-30UEmpMed8.717651994-12-31UEmpMed8.017661995-01-31UEmpMed8.117671995-02-28UEmpMed8.317681995-03-31UEmpMed8.317691995-04-30UEmpMed9.117701995-05-31UEmpMed7.917711995-06-30UEmpMed8.517721995-07-31UEmpMed8.317731995-08-31UEmpMed7.917741995-09-30UEmpMed8.217751995-10-31UEmpMed8.017761995-11-30UEmpMed8.317771995-12-31UEmpMed8.317781996-01-31UEmpMed7.817791996-02-29UEmpMed8.317801996-03-31UEmpMed8.617811996-04-30UEmpMed8.617821996-05-31UEmpMed8.317831996-06-30UEmpMed8.317841996-07-31UEmpMed8.417851996-08-31UEmpMed8.517861996-09-30UEmpMed8.317871996-10-31UEmpMed7.717881996-11-30UEmpMed7.817891996-12-31UEmpMed7.817901997-01-31UEmpMed8.117911997-02-28UEmpMed7.917921997-03-31UEmpMed8.317931997-04-30UEmpMed8.017941997-05-31UEmpMed8.017951997-06-30UEmpMed8.317961997-07-31UEmpMed7.817971997-08-31UEmpMed8.217981997-09-30UEmpMed7.717991997-10-31UEmpMed7.618001997-11-30UEmpMed7.518011997-12-31UEmpMed7.418021998-01-31UEmpMed7.018031998-02-28UEmpMed6.818041998-03-31UEmpMed6.718051998-04-30UEmpMed6.018061998-05-31UEmpMed6.918071998-06-30UEmpMed6.718081998-07-31UEmpMed6.818091998-08-31UEmpMed6.718101998-09-30UEmpMed5.818111998-10-31UEmpMed6.618121998-11-30UEmpMed6.818131998-12-31UEmpMed6.918141999-01-31UEmpMed6.818151999-02-28UEmpMed6.818161999-03-31UEmpMed6.218171999-04-30UEmpMed6.518181999-05-31UEmpMed6.318191999-06-30UEmpMed5.818201999-07-31UEmpMed6.518211999-08-31UEmpMed6.018221999-09-30UEmpMed6.118231999-10-31UEmpMed6.218241999-11-30UEmpMed5.818251999-12-31UEmpMed5.818262000-01-31UEmpMed6.118272000-02-29UEmpMed6.018282000-03-31UEmpMed6.118292000-04-30UEmpMed5.818302000-05-31UEmpMed5.718312000-06-30UEmpMed6.018322000-07-31UEmpMed6.318332000-08-31UEmpMed5.218342000-09-30UEmpMed6.118352000-10-31UEmpMed6.118362000-11-30UEmpMed6.018372000-12-31UEmpMed5.818382001-01-31UEmpMed6.118392001-02-28UEmpMed6.618402001-03-31UEmpMed5.918412001-04-30UEmpMed6.318422001-05-31UEmpMed6.018432001-06-30UEmpMed6.818442001-07-31UEmpMed6.918452001-08-31UEmpMed7.218462001-09-30UEmpMed7.318472001-10-31UEmpMed7.718482001-11-30UEmpMed8.218492001-12-31UEmpMed8.418502002-01-31UEmpMed8.318512002-02-28UEmpMed8.418522002-03-31UEmpMed8.918532002-04-30UEmpMed9.518542002-05-31UEmpMed11.018552002-06-30UEmpMed8.918562002-07-31UEmpMed9.018572002-08-31UEmpMed9.518582002-09-30UEmpMed9.618592002-10-31UEmpMed9.318602002-11-30UEmpMed9.618612002-12-31UEmpMed9.618622003-01-31UEmpMed9.518632003-02-28UEmpMed9.718642003-03-31UEmpMed10.218652003-04-30UEmpMed9.918662003-05-31UEmpMed11.518672003-06-30UEmpMed10.318682003-07-31UEmpMed10.118692003-08-31UEmpMed10.218702003-09-30UEmpMed10.418712003-10-31UEmpMed10.318722003-11-30UEmpMed10.418732003-12-31UEmpMed10.618742004-01-31UEmpMed10.218752004-02-29UEmpMed10.218762004-03-31UEmpMed9.518772004-04-30UEmpMed9.918782004-05-31UEmpMed10.918792004-06-30UEmpMed8.918802004-07-31UEmpMed9.318812004-08-31UEmpMed9.618822004-09-30UEmpMed9.518832004-10-31UEmpMed9.718842004-11-30UEmpMed9.418852004-12-31UEmpMed9.418862005-01-31UEmpMed9.118872005-02-28UEmpMed9.218882005-03-31UEmpMed9.018892005-04-30UEmpMed9.118902005-05-31UEmpMed9.218912005-06-30UEmpMed9.018922005-07-31UEmpMed9.218932005-08-31UEmpMed8.518942005-09-30UEmpMed8.618952005-10-31UEmpMed8.418962005-11-30UEmpMed8.518972005-12-31UEmpMed8.518982006-01-31UEmpMed8.918992006-02-28UEmpMed8.519002006-03-31UEmpMed8.519012006-04-30UEmpMed8.519022006-05-31UEmpMed7.619032006-06-30UEmpMed8.219042006-07-31UEmpMed8.419052006-08-31UEmpMed8.119062006-09-30UEmpMed8.019072006-10-31UEmpMed8.219082006-11-30UEmpMed7.319092006-12-31UEmpMed8.119102007-01-31UEmpMed8.119112007-02-28UEmpMed8.519122007-03-31UEmpMed8.719131967-06-30Unemploy2944.019141967-07-31Unemploy2945.019151967-08-31Unemploy2958.019161967-09-30Unemploy3143.019171967-10-31Unemploy3066.019181967-11-30Unemploy3018.019191967-12-31Unemploy2878.019201968-01-31Unemploy3001.019211968-02-29Unemploy2877.019221968-03-31Unemploy2709.019231968-04-30Unemploy2740.019241968-05-31Unemploy2938.019251968-06-30Unemploy2883.019261968-07-31Unemploy2768.019271968-08-31Unemploy2686.019281968-09-30Unemploy2689.019291968-10-31Unemploy2715.019301968-11-30Unemploy2685.019311968-12-31Unemploy2718.019321969-01-31Unemploy2692.019331969-02-28Unemploy2712.019341969-03-31Unemploy2758.019351969-04-30Unemploy2713.019361969-05-31Unemploy2816.019371969-06-30Unemploy2868.019381969-07-31Unemploy2856.019391969-08-31Unemploy3040.019401969-09-30Unemploy3049.019411969-10-31Unemploy2856.019421969-11-30Unemploy2884.019431969-12-31Unemploy3201.019441970-01-31Unemploy3453.019451970-02-28Unemploy3635.019461970-03-31Unemploy3797.019471970-04-30Unemploy3919.019481970-05-31Unemploy4071.019491970-06-30Unemploy4175.019501970-07-31Unemploy4256.019511970-08-31Unemploy4456.019521970-09-30Unemploy4591.019531970-10-31Unemploy4898.019541970-11-30Unemploy5076.019551970-12-31Unemploy4986.019561971-01-31Unemploy4903.019571971-02-28Unemploy4987.019581971-03-31Unemploy4959.019591971-04-30Unemploy4996.019601971-05-31Unemploy4949.019611971-06-30Unemploy5035.019621971-07-31Unemploy5134.019631971-08-31Unemploy5042.019641971-09-30Unemploy4954.019651971-10-31Unemploy5161.019661971-11-30Unemploy5154.019671971-12-31Unemploy5019.019681972-01-31Unemploy4928.019691972-02-29Unemploy5038.019701972-03-31Unemploy4959.019711972-04-30Unemploy4922.019721972-05-31Unemploy4923.019731972-06-30Unemploy4913.019741972-07-31Unemploy4939.019751972-08-31Unemploy4849.019761972-09-30Unemploy4875.019771972-10-31Unemploy4602.019781972-11-30Unemploy4543.019791972-12-31Unemploy4326.019801973-01-31Unemploy4452.019811973-02-28Unemploy4394.019821973-03-31Unemploy4459.019831973-04-30Unemploy4329.019841973-05-31Unemploy4363.019851973-06-30Unemploy4305.019861973-07-31Unemploy4305.019871973-08-31Unemploy4350.019881973-09-30Unemploy4144.019891973-10-31Unemploy4396.019901973-11-30Unemploy4489.019911973-12-31Unemploy4644.019921974-01-31Unemploy4731.019931974-02-28Unemploy4634.019941974-03-31Unemploy4618.019951974-04-30Unemploy4705.019961974-05-31Unemploy4927.019971974-06-30Unemploy5063.019981974-07-31Unemploy5022.019991974-08-31Unemploy5437.020001974-09-30Unemploy5523.020011974-10-31Unemploy6140.020021974-11-30Unemploy6636.020031974-12-31Unemploy7501.020041975-01-31Unemploy7520.020051975-02-28Unemploy7978.020061975-03-31Unemploy8210.020071975-04-30Unemploy8433.020081975-05-31Unemploy8220.020091975-06-30Unemploy8127.020101975-07-31Unemploy7928.020111975-08-31Unemploy7923.020121975-09-30Unemploy7897.020131975-10-31Unemploy7794.020141975-11-30Unemploy7744.020151975-12-31Unemploy7534.020161976-01-31Unemploy7326.020171976-02-29Unemploy7230.020181976-03-31Unemploy7330.020191976-04-30Unemploy7053.020201976-05-31Unemploy7322.020211976-06-30Unemploy7490.020221976-07-31Unemploy7518.020231976-08-31Unemploy7380.020241976-09-30Unemploy7430.020251976-10-31Unemploy7620.020261976-11-30Unemploy7545.020271976-12-31Unemploy7280.020281977-01-31Unemploy7443.020291977-02-28Unemploy7307.020301977-03-31Unemploy7059.020311977-04-30Unemploy6911.020321977-05-31Unemploy7134.020331977-06-30Unemploy6829.020341977-07-31Unemploy6925.020351977-08-31Unemploy6751.020361977-09-30Unemploy6763.020371977-10-31Unemploy6815.020381977-11-30Unemploy6386.020391977-12-31Unemploy6489.020401978-01-31Unemploy6318.020411978-02-28Unemploy6337.020421978-03-31Unemploy6180.020431978-04-30Unemploy6127.020441978-05-31Unemploy6028.020451978-06-30Unemploy6309.020461978-07-31Unemploy6080.020471978-08-31Unemploy6125.020481978-09-30Unemploy5947.020491978-10-31Unemploy6077.020501978-11-30Unemploy6228.020511978-12-31Unemploy6109.020521979-01-31Unemploy6173.020531979-02-28Unemploy6109.020541979-03-31Unemploy6069.020551979-04-30Unemploy5840.020561979-05-31Unemploy5959.020571979-06-30Unemploy5996.020581979-07-31Unemploy6320.020591979-08-31Unemploy6190.020601979-09-30Unemploy6296.020611979-10-31Unemploy6238.020621979-11-30Unemploy6325.020631979-12-31Unemploy6683.020641980-01-31Unemploy6702.020651980-02-29Unemploy6729.020661980-03-31Unemploy7358.020671980-04-30Unemploy7984.020681980-05-31Unemploy8098.020691980-06-30Unemploy8363.020701980-07-31Unemploy8281.020711980-08-31Unemploy8021.020721980-09-30Unemploy8088.020731980-10-31Unemploy8023.020741980-11-30Unemploy7718.020751980-12-31Unemploy8071.020761981-01-31Unemploy8051.020771981-02-28Unemploy7982.020781981-03-31Unemploy7869.020791981-04-30Unemploy8174.020801981-05-31Unemploy8098.020811981-06-30Unemploy7863.020821981-07-31Unemploy8036.020831981-08-31Unemploy8230.020841981-09-30Unemploy8646.020851981-10-31Unemploy9029.020861981-11-30Unemploy9267.020871981-12-31Unemploy9397.020881982-01-31Unemploy9705.020891982-02-28Unemploy9895.020901982-03-31Unemploy10244.020911982-04-30Unemploy10335.020921982-05-31Unemploy10538.020931982-06-30Unemploy10849.020941982-07-31Unemploy10881.020951982-08-31Unemploy11217.020961982-09-30Unemploy11529.020971982-10-31Unemploy11938.020981982-11-30Unemploy12051.020991982-12-31Unemploy11534.021001983-01-31Unemploy11545.021011983-02-28Unemploy11408.021021983-03-31Unemploy11268.021031983-04-30Unemploy11154.021041983-05-31Unemploy11246.021051983-06-30Unemploy10548.021061983-07-31Unemploy10623.021071983-08-31Unemploy10282.021081983-09-30Unemploy9887.021091983-10-31Unemploy9499.021101983-11-30Unemploy9331.021111983-12-31Unemploy9008.021121984-01-31Unemploy8791.021131984-02-29Unemploy8746.021141984-03-31Unemploy8762.021151984-04-30Unemploy8456.021161984-05-31Unemploy8226.021171984-06-30Unemploy8537.021181984-07-31Unemploy8519.021191984-08-31Unemploy8367.021201984-09-30Unemploy8381.021211984-10-31Unemploy8198.021221984-11-30Unemploy8358.021231984-12-31Unemploy8423.021241985-01-31Unemploy8321.021251985-02-28Unemploy8339.021261985-03-31Unemploy8395.021271985-04-30Unemploy8302.021281985-05-31Unemploy8460.021291985-06-30Unemploy8513.021301985-07-31Unemploy8196.021311985-08-31Unemploy8248.021321985-09-30Unemploy8298.021331985-10-31Unemploy8128.021341985-11-30Unemploy8138.021351985-12-31Unemploy7795.021361986-01-31Unemploy8402.021371986-02-28Unemploy8383.021381986-03-31Unemploy8364.021391986-04-30Unemploy8439.021401986-05-31Unemploy8508.021411986-06-30Unemploy8319.021421986-07-31Unemploy8135.021431986-08-31Unemploy8310.021441986-09-30Unemploy8243.021451986-10-31Unemploy8159.021461986-11-30Unemploy7883.021471986-12-31Unemploy7892.021481987-01-31Unemploy7865.021491987-02-28Unemploy7862.021501987-03-31Unemploy7542.021511987-04-30Unemploy7574.021521987-05-31Unemploy7398.021531987-06-30Unemploy7268.021541987-07-31Unemploy7261.021551987-08-31Unemploy7102.021561987-09-30Unemploy7227.021571987-10-31Unemploy7035.021581987-11-30Unemploy6936.021591987-12-31Unemploy6953.021601988-01-31Unemploy6929.021611988-02-29Unemploy6876.021621988-03-31Unemploy6601.021631988-04-30Unemploy6779.021641988-05-31Unemploy6546.021651988-06-30Unemploy6605.021661988-07-31Unemploy6843.021671988-08-31Unemploy6604.021681988-09-30Unemploy6568.021691988-10-31Unemploy6537.021701988-11-30Unemploy6518.021711988-12-31Unemploy6682.021721989-01-31Unemploy6359.021731989-02-28Unemploy6205.021741989-03-31Unemploy6468.021751989-04-30Unemploy6375.021761989-05-31Unemploy6577.021771989-06-30Unemploy6495.021781989-07-31Unemploy6511.021791989-08-31Unemploy6590.021801989-09-30Unemploy6630.021811989-10-31Unemploy6725.021821989-11-30Unemploy6667.021831989-12-31Unemploy6752.021841990-01-31Unemploy6651.021851990-02-28Unemploy6598.021861990-03-31Unemploy6797.021871990-04-30Unemploy6742.021881990-05-31Unemploy6590.021891990-06-30Unemploy6922.021901990-07-31Unemploy7188.021911990-08-31Unemploy7368.021921990-09-30Unemploy7459.021931990-10-31Unemploy7764.021941990-11-30Unemploy7901.021951990-12-31Unemploy8015.021961991-01-31Unemploy8265.021971991-02-28Unemploy8586.021981991-03-31Unemploy8439.021991991-04-30Unemploy8736.022001991-05-31Unemploy8692.022011991-06-30Unemploy8586.022021991-07-31Unemploy8666.022031991-08-31Unemploy8722.022041991-09-30Unemploy8842.022051991-10-31Unemploy8931.022061991-11-30Unemploy9198.022071991-12-31Unemploy9283.022081992-01-31Unemploy9454.022091992-02-29Unemploy9460.022101992-03-31Unemploy9415.022111992-04-30Unemploy9744.022121992-05-31Unemploy10040.022131992-06-30Unemploy9850.022141992-07-31Unemploy9787.022151992-08-31Unemploy9781.022161992-09-30Unemploy9398.022171992-10-31Unemploy9565.022181992-11-30Unemploy9557.022191992-12-31Unemploy9325.022201993-01-31Unemploy9183.022211993-02-28Unemploy9056.022221993-03-31Unemploy9110.022231993-04-30Unemploy9149.022241993-05-31Unemploy9121.022251993-06-30Unemploy8930.022261993-07-31Unemploy8763.022271993-08-31Unemploy8714.022281993-09-30Unemploy8750.022291993-10-31Unemploy8542.022301993-11-30Unemploy8477.022311993-12-31Unemploy8630.022321994-01-31Unemploy8583.022331994-02-28Unemploy8470.022341994-03-31Unemploy8331.022351994-04-30Unemploy7915.022361994-05-31Unemploy7927.022371994-06-30Unemploy7946.022381994-07-31Unemploy7933.022391994-08-31Unemploy7734.022401994-09-30Unemploy7632.022411994-10-31Unemploy7375.022421994-11-30Unemploy7230.022431994-12-31Unemploy7375.022441995-01-31Unemploy7187.022451995-02-28Unemploy7153.022461995-03-31Unemploy7645.022471995-04-30Unemploy7430.022481995-05-31Unemploy7427.022491995-06-30Unemploy7527.022501995-07-31Unemploy7484.022511995-08-31Unemploy7478.022521995-09-30Unemploy7328.022531995-10-31Unemploy7426.022541995-11-30Unemploy7423.022551995-12-31Unemploy7491.022561996-01-31Unemploy7313.022571996-02-29Unemploy7318.022581996-03-31Unemploy7415.022591996-04-30Unemploy7423.022601996-05-31Unemploy7095.022611996-06-30Unemploy7337.022621996-07-31Unemploy6882.022631996-08-31Unemploy6979.022641996-09-30Unemploy7031.022651996-10-31Unemploy7236.022661996-11-30Unemploy7253.022671996-12-31Unemploy7158.022681997-01-31Unemploy7102.022691997-02-28Unemploy7000.022701997-03-31Unemploy6873.022711997-04-30Unemploy6655.022721997-05-31Unemploy6799.022731997-06-30Unemploy6655.022741997-07-31Unemploy6608.022751997-08-31Unemploy6656.022761997-09-30Unemploy6454.022771997-10-31Unemploy6308.022781997-11-30Unemploy6476.022791997-12-31Unemploy6368.022801998-01-31Unemploy6306.022811998-02-28Unemploy6422.022821998-03-31Unemploy5941.022831998-04-30Unemploy6047.022841998-05-31Unemploy6212.022851998-06-30Unemploy6259.022861998-07-31Unemploy6179.022871998-08-31Unemploy6300.022881998-09-30Unemploy6280.022891998-10-31Unemploy6100.022901998-11-30Unemploy6032.022911998-12-31Unemploy5976.022921999-01-31Unemploy6111.022931999-02-28Unemploy5783.022941999-03-31Unemploy6004.022951999-04-30Unemploy5796.022961999-05-31Unemploy5951.022971999-06-30Unemploy6025.022981999-07-31Unemploy5838.022991999-08-31Unemploy5915.023001999-09-30Unemploy5778.023011999-10-31Unemploy5716.023021999-11-30Unemploy5653.023031999-12-31Unemploy5708.023042000-01-31Unemploy5858.023052000-02-29Unemploy5733.023062000-03-31Unemploy5481.023072000-04-30Unemploy5758.023082000-05-31Unemploy5651.023092000-06-30Unemploy5747.023102000-07-31Unemploy5853.023112000-08-31Unemploy5625.023122000-09-30Unemploy5534.023132000-10-31Unemploy5639.023142000-11-30Unemploy5634.023152000-12-31Unemploy6023.023162001-01-31Unemploy6089.023172001-02-28Unemploy6141.023182001-03-31Unemploy6271.023192001-04-30Unemploy6226.023202001-05-31Unemploy6484.023212001-06-30Unemploy6583.023222001-07-31Unemploy7042.023232001-08-31Unemploy7142.023242001-09-30Unemploy7694.023252001-10-31Unemploy8003.023262001-11-30Unemploy8258.023272001-12-31Unemploy8182.023282002-01-31Unemploy8215.023292002-02-28Unemploy8304.023302002-03-31Unemploy8599.023312002-04-30Unemploy8399.023322002-05-31Unemploy8393.023332002-06-30Unemploy8390.023342002-07-31Unemploy8304.023352002-08-31Unemploy8251.023362002-09-30Unemploy8307.023372002-10-31Unemploy8520.023382002-11-30Unemploy8640.023392002-12-31Unemploy8523.023402003-01-31Unemploy8622.023412003-02-28Unemploy8576.023422003-03-31Unemploy8833.023432003-04-30Unemploy8948.023442003-05-31Unemploy9254.023452003-06-30Unemploy9018.023462003-07-31Unemploy8894.023472003-08-31Unemploy8928.023482003-09-30Unemploy8731.023492003-10-31Unemploy8590.023502003-11-30Unemploy8338.023512003-12-31Unemploy8367.023522004-01-31Unemploy8171.023532004-02-29Unemploy8452.023542004-03-31Unemploy8155.023552004-04-30Unemploy8197.023562004-05-31Unemploy8259.023572004-06-30Unemploy8163.023582004-07-31Unemploy7993.023592004-08-31Unemploy7953.023602004-09-30Unemploy8052.023612004-10-31Unemploy7950.023622004-11-30Unemploy7997.023632004-12-31Unemploy7756.023642005-01-31Unemploy7966.023652005-02-28Unemploy7683.023662005-03-31Unemploy7657.023672005-04-30Unemploy7656.023682005-05-31Unemploy7507.023692005-06-30Unemploy7464.023702005-07-31Unemploy7360.023712005-08-31Unemploy7606.023722005-09-30Unemploy7436.023732005-10-31Unemploy7548.023742005-11-30Unemploy7331.023752005-12-31Unemploy7023.023762006-01-31Unemploy7158.023772006-02-28Unemploy7009.023782006-03-31Unemploy7098.023792006-04-30Unemploy7006.023802006-05-31Unemploy6984.023812006-06-30Unemploy7228.023822006-07-31Unemploy7116.023832006-08-31Unemploy6912.023842006-09-30Unemploy6715.023852006-10-31Unemploy6826.023862006-11-30Unemploy6849.023872006-12-31Unemploy7017.023882007-01-31Unemploy6865.023892007-02-28Unemploy6724.023902007-03-31Unemploy6801.0 <p>geom_line is suitable for time series</p> <pre><code>ggplot(economics, @aes(x = Date, y = Unemploy)) + geom_line()\n</code></pre> <p></p> <ul> <li> <p>```@example geom_lines ggplot(economics) +     [geom_line(aes(x = :Date, y = v)) for v in [:Unemploy, :PCE, :Pop]]</p> <p>using Dates</p> <p>xdates = Date.([\"2025-02-17\", \"2025-02-18\"]) xnums = [1, 2] nums1 = [1, 2] nums2 = [3, 4]</p> <p>f, _, pl = lines(xdates, nums1) lines!(f[1,1], xdates, nums2)</p> <p>Makie.plot(         Makie.SpecApi.GridLayout(             Makie.SpecApi.Axis(                 plots=[                     Makie.PlotSpec(                         :Lines,                         xdates,                         nums1),                     Makie.PlotSpec(                         :Lines,                         xdates,                         nums2)                 ]             )         )     )</p> <p>ggplot(penguins, @aes(x = bill_length_mm, y = bill_depth_mm)) +     geom_path()</p> <p>xs = range(0, 2pi, length=30) df = DataFrame(x = xs, y = sin.(xs))</p> <p>ggplot(df, @aes(x = x, y = y)) + geom_step() ```</p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/geoms/geom_point/","title":"geom_point","text":""},{"location":"examples/generated/geoms/geom_point/#geom_point","title":"geom_point","text":"<p>The point geom is used to create scatterplots. The scatterplot is most useful for displaying the relationship between two continuous variables. It can be used to compare one continuous and one categorical variable, or two categorical variables, but other charts are usually more appropriate. A bubblechart is a scatterplot with a third variable mapped to the size of points.</p> <p></p> <p></p>"},{"location":"examples/generated/geoms/geom_point/#arguments","title":"Arguments","text":"<ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to. This is typically used to facilitate creating your ggplot as part of a @chain.</li> <li><code>data</code> (DataFrame): Data to use for this geom. If not provided, the geom will inherit the data from ggplot.</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>inherit_aes</code>: should the geom inherit aes from the ggplot?</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.Scatter)</li> </ul>"},{"location":"examples/generated/geoms/geom_point/#overplotting","title":"Overplotting","text":"<p>The biggest potential problem with a scatterplot is overplotting: whenever you have more than a few points, points may be plotted on top of one another. This can severely distort the visual appearance of the plot. There is no one solution to this problem, but there are some techniques that can help. You can add additional information with geom_smooth(), or if you have few unique x values, geom_boxplot() may also be useful. Another technique is to make the points transparent (e.g. geom_point(alpha = 0.05)) or very small (e.g. geom_point(shape = '.')).</p> <p></p> <p></p>"},{"location":"examples/generated/geoms/geom_point/#required-aesthetics","title":"Required Aesthetics","text":"<ul> <li><code>x</code></li> <li><code>y</code></li> </ul>"},{"location":"examples/generated/geoms/geom_point/#optional-aesthetics-see-aes","title":"Optional Aesthetics (see <code>aes</code>)","text":"<ul> <li><code>color</code> / <code>colour</code></li> <li><code>fill</code></li> <li><code>shape</code></li> <li><code>size</code></li> <li><code>stroke</code></li> </ul>"},{"location":"examples/generated/geoms/geom_point/#optional-arguments","title":"Optional Arguments","text":"<ul> <li><code>color</code> / <code>colour</code></li> <li><code>colormap</code> / <code>palette</code></li> <li><code>marker</code> / <code>shape</code></li> <li><code>markersize</code> / <code>size</code></li> <li><code>strokewidth</code> / <code>stroke</code></li> <li><code>strokecolor</code> / <code>strokecolour</code></li> <li><code>glowwidth</code> / <code>glow</code></li> <li><code>glowcolor</code> / <code>glowcolour</code></li> <li><code>alpha</code></li> </ul> <pre><code>using TidierPlots\nusing DataFrames\nusing PalmerPenguins\nusing RDatasets\nusing CategoricalArrays\nusing Makie\n\npenguins = dropmissing(DataFrame(PalmerPenguins.load()));\ndiamonds = dataset(\"ggplot2\", \"diamonds\");\nmtcars = dataset(\"datasets\", \"mtcars\");\n</code></pre> <p>For a basic scatterplot, you need data, an x aes, and a y aes.</p> <pre><code>ggplot(penguins, @aes(x = bill_length_mm, y = bill_depth_mm)) +\n    geom_point()\n</code></pre> <p></p> <p>Add aesthetics, such as color:</p> <pre><code>ggplot(penguins, @aes(x = bill_length_mm, y = bill_depth_mm)) +\n    geom_point(@aes(color = sex))\n</code></pre> <p></p> <p>Shape:</p> <pre><code>ggplot(penguins, @aes(x = bill_length_mm, y = bill_depth_mm)) +\n    geom_point(@aes(shape = sex)) + scale_shape()\n</code></pre> <p></p> <p>Or size, to make a \"bubblechart\":</p> <pre><code>ggplot(penguins, @aes(x = bill_length_mm, y = bill_depth_mm)) +\n    geom_point(@aes(size = body_mass_g)) +\n    scale_size(range = [5, 15], name = \"Body Mass (g)\")\n</code></pre> <p></p> <p>Aesthetics can also be set to a fixed value by setting them outside the aes function:</p> <pre><code>ggplot(penguins, @aes(x = bill_length_mm, y = bill_depth_mm)) +\n    geom_point(size=18, alpha = 0.5)\n</code></pre> <p></p> <p>Varying alpha can be useful for large datasets so you can see the density of points.</p> <pre><code>ggplot(diamonds, aes(x = :Carat, y = :Price)) +\n    geom_point(alpha=0.1)\n</code></pre> <p></p> <pre><code>ggplot(diamonds, aes(x = :Carat, y = :Price)) +\n    geom_point(alpha=0.05)\n</code></pre> <p></p> <pre><code>ggplot(diamonds, aes(x = :Carat, y = :Price)) +\n    geom_point(alpha=0.02)\n</code></pre> <p></p> <p>All shapes can have both color and fill set. Refer to shapes by their name.</p> <pre><code>ggplot(mtcars, aes(x=:WT, y=:MPG, fill = :Cyl =&gt; CategoricalArray)) +\n    geom_point(shape=:circle, strokecolor=\"black\", size=30, stroke=5)\n</code></pre> <p></p> <p>Create simple compound shapes using multiple geom_point layers, or see the Makie documentation for more advanced shapes.</p> <pre><code>ggplot(mtcars, aes(x=:MPG, y=:WT, shape=:Cyl =&gt; CategoricalArray)) +\n    geom_point(aes(colour=:Cyl =&gt; CategoricalArray), size=20) +\n    geom_point(size=10) + scale_shape()\n</code></pre> <p></p> <p>Makie allows basically any shape you want to be used as a scatter marker. Here, we construct a Bat Symbol using a BezierPath:</p> <pre><code>batsymbol_string = \"M96.84 141.998c-4.947-23.457-20.359-32.211-25.862-13.887-11.822-22.963-37.961-16.135-22.041 6.289-3.005-1.295-5.872-2.682-8.538-4.191-8.646-5.318-15.259-11.314-19.774-17.586-3.237-5.07-4.994-10.541-4.994-16.229 0-19.774 21.115-36.758 50.861-43.694.446-.078.909-.154 1.372-.231-22.657 30.039 9.386 50.985 15.258 24.645l2.528-24.367 5.086 6.52H103.205l5.07-6.52 2.543 24.367c5.842 26.278 37.746 5.502 15.414-24.429 29.777 6.951 50.891 23.936 50.891 43.709 0 15.136-12.406 28.651-31.609 37.267 14.842-21.822-10.867-28.266-22.549-5.549-5.502-18.325-21.147-9.341-26.125 13.886z\"\n\nbatsymbol = BezierPath(batsymbol_string, fit=true, flipy=true)\n\nggplot(mtcars) + geom_point(aes(x=:MPG, y=:WT), shape=batsymbol, size=20)\n</code></pre> <p></p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/geoms/geom_rainclouds/","title":"Geom rainclouds","text":""},{"location":"examples/generated/geoms/geom_rainclouds/#geom_rainclouds","title":"geom_rainclouds","text":"<p>\"Raincloud\" plots are a combination of a (half) violin plot, box plot and scatter plots. The three together can make an appealing and informative visual, particularly for large N datasets.</p> <p></p> <p></p>"},{"location":"examples/generated/geoms/geom_rainclouds/#arguments","title":"Arguments","text":"<ul> <li><code>plot::GGPlot</code> (optional): a plot object to add this geom to. This is typically used to facilitate creating your ggplot as part of a @chain.</li> <li><code>data</code> (DataFrame): Data to use for this geom. If not provided, the geom will inherit the data from ggplot.</li> <li><code>aes(...)</code>: the names of the columns in the DataFrame that will be used in the mapping</li> <li><code>inherit_aes</code>: should the geom inherit aes from the ggplot?</li> <li><code>...</code>: options that are not mapped to a column (passed to Makie.Scatter)</li> </ul>"},{"location":"examples/generated/geoms/geom_rainclouds/#required-aesthetics","title":"Required Aesthetics","text":"<ul> <li><code>x</code></li> <li><code>y</code></li> </ul>"},{"location":"examples/generated/geoms/geom_rainclouds/#optional-aesthetics-see-aes","title":"Optional Aesthetics (see <code>aes</code>)","text":"<ul> <li><code>color</code> / <code>colour</code></li> <li><code>size</code></li> <li><code>stroke</code></li> <li><code>dodge</code></li> </ul> <p>Optional Arguments</p> <ul> <li><code>boxplot_nudge</code>: Default 0.075. Determines the distance away the boxplot should be placed from the center line when center_boxplot is false. This is the value used to recentering the boxplot.</li> <li><code>boxplot_width</code>: Default 0.1. Determines the width of the boxplot.</li> <li><code>center_boxplot</code>: Default true. Determines whether the boxplot should be centered on the category.</li> <li><code>cloud_width</code>: Default 0.75. Determines the width of the violin.</li> <li><code>clouds</code>: Default violin. Valid values: [violin, hist, nothing]clouds</li> <li><code>color</code> / <code>colour</code>: Default will be blue unless changed by palette or aes.</li> <li><code>dodge_gap</code>: Default 0.01. Determines the gap between the dodged boxes.</li> <li><code>gap</code>: Default 0.2. Distance between the main elements of the plot.</li> <li><code>hist_bins</code>: Default 30. If <code>clouds == hist</code>, determines the number of bins for the histogram.</li> <li><code>markersize</code> / <code>size</code>: Default 2. Size of markers in the scatterplot.</li> <li><code>plot_boxplots</code>: Default true. Determines whether the boxplot should be plotted.</li> <li><code>show_boxplot_outliers</code>: Default false. Determines whether the outliers should be shown in the boxplot.</li> <li><code>show_median</code>: Default true. Determines whether the median should be shown in the boxplot.</li> <li><code>side</code>: Default :left. Determines the side of the violin relative to the points.</li> <li><code>strokewidth</code> / <code>stroke</code>: Default 1. Width of the stroke around the boxplot.</li> <li><code>whisker_width</code>: Default 0.5. Width of the whiskers in the boxplot.</li> </ul> <pre><code>using TidierPlots\nusing DataFrames\nusing PalmerPenguins\n\npenguins = dropmissing(DataFrame(PalmerPenguins.load()));\n\nggplot(penguins) +\ngeom_rainclouds(@aes(x = species, y = bill_depth_mm))\n</code></pre> <p></p> <p>Orientation will change automatically based on the data.</p> <pre><code>ggplot(penguins) +\ngeom_rainclouds(@aes(x = bill_depth_mm, y = species))\n</code></pre> <p></p> <p>Add a color aesthetic to help distinguish between categories:</p> <pre><code>ggplot(penguins) +\ngeom_rainclouds(@aes(x = bill_depth_mm, y = species, color = species))\n</code></pre> <p></p> <p>Change the violin plot into a histogram:</p> <p><code>@example geom_rainclouds ggplot(penguins) + geom_rainclouds(@aes(x = bill_depth_mm, y = species, color = species), clouds=hist)</code></p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/geoms/geom_smooth/","title":"geom_smooth","text":"<pre><code>using TidierPlots\nusing DataFrames\nusing PalmerPenguins\n\npenguins = dropmissing(DataFrame(PalmerPenguins.load()));\n</code></pre> <pre><code>xs = range(0, 2pi, length=30)\nys = sin.(xs) .+ randn(length(xs)) * 0.5\ndf = DataFrame(x = xs, y = ys)\n\nggplot(df, @aes(x = x, y = y)) + geom_smooth() + geom_point()\n</code></pre> <pre><code>ggplot(penguins, @aes(x = bill_length_mm, y = bill_depth_mm)) +\n    geom_smooth(color=:red, linewidth=10, alpha=0.5)\n</code></pre> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/geoms/geom_text/","title":"geom_text","text":"<pre><code>using TidierPlots\nusing DataFrames\n\ndf = DataFrame(\n    x=[1, 1, 2, 2],\n    y=[1, 2, 1, 2],\n    t=[\"A\", \"B\", \"C\", \"D\"]\n)\n\nggplot(df, @aes(x = x, y = y, text = t, color = t)) + geom_text()\n\nggplot(df, @aes(x = x, y = y, color = t)) +\ngeom_text(@aes(text = t), fontsize=24, align=(:left, :bottom), font=:bold) +\ngeom_point() +\nlims(x=(0, 3), y=(0, 3))\n\nggplot(df, @aes(x = x, y = y, text = t, color = t)) + geom_label()\n\nggplot(df, @aes(x = x, y = y, color = t)) +\ngeom_label(@aes(text = t), fontsize=24, align=(:left, :bottom), font=:bold) +\ngeom_point() +\nlims(x=(0, 3), y=(0, 3))\n</code></pre> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/geoms/geom_tile/","title":"geom_tile","text":"<pre><code>using TidierPlots\nusing DataFrames\n\nfunction mandelbrot(x, y)\n    z = c = x + y*im\n    for i in 1:30.0; abs(z) &gt; 2 &amp;&amp; return i; z = z^2 + c; end; 0\nend\n\nxs = -2:0.01:1\nys = -1.1:0.01:1.1\nxys = Iterators.product(xs, ys) |&gt; collect |&gt; vec\nzs = map(xy -&gt; mandelbrot(xy[1], xy[2]), xys)\n\ndf = DataFrame(\n    x = first.(xys),\n    y = last.(xys),\n    z = zs\n)\n\nggplot(df, @aes(x = x, y = y, z = z)) + geom_tile()\n</code></pre> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/geoms/geom_violin/","title":"geom_violin","text":"<pre><code>using TidierPlots\nusing DataFrames\nusing PalmerPenguins\n\npenguins = dropmissing(DataFrame(PalmerPenguins.load()));\n</code></pre> <pre><code>ggplot(penguins, @aes(x = species, y = bill_length_mm)) +\n    geom_violin()\n\nggplot(penguins, @aes(x = species, y = bill_length_mm)) +\n    geom_violin(orientation = :horizontal)\n</code></pre> <pre><code>ggplot(penguins, @aes(x=species, y=bill_length_mm, fill=sex)) +\n    geom_violin()\n</code></pre> <p>This page was generated using Literate.jl.</p>"}]}